<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>新的git仓库</title>
      <link href="/2020/06/05/git/"/>
      <url>/2020/06/05/git/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m “add README”</span><br><span class="line">git push -u origin master</span><br><span class="line">git checkout -b develop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>发布npm包</title>
      <link href="/2020/04/23/npm_01/"/>
      <url>/2020/04/23/npm_01/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、注册账号</span><br><span class="line">    - 进入网址: https://www.npmjs.com 注册一个npm账号。</span><br><span class="line">    - 进邮箱验证npm账号(否则发布会报错)</span><br><span class="line"></span><br><span class="line">2、创建一个简单的npm包</span><br><span class="line">    2-1、在本地创建一个文件夹：如：achirsh-demo（注意名字应该是npm</span><br><span class="line">        上没有的，可以在npm上搜索一下看你命的名字是否存在）</span><br><span class="line">    2-2、cd进入该文件夹</span><br><span class="line">    2-3、初始化项目，执行 npm init -y 得到package.json文件</span><br><span class="line">    2-4、在文件夹jiang-model中创建名为index.js的文件</span><br><span class="line">    2-5、创建README.md文件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;jiang-model&quot;,//发布的包名，默认是上级文件夹名。不得与现在npm中的包名重复。包名不能有大写字母/空格/下滑线!</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,//默认版本号</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,//项目简介</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,//入口文件，默认是Index.js，可以修改成自己的文件 </span><br><span class="line">  &quot;scripts&quot;: &#123; //包含各种脚本执行命令</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,//作者</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;//开源文件协议</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">3、发布到npm</span><br><span class="line">    3-1、切换下载源 安装 npm install -g nrm</span><br><span class="line">        nrm ls //查看当前的下载源，带*指向的就是当前的下载源，如果为npm则不需要切换</span><br><span class="line">        nrm use npm //切换到npm的下载源</span><br><span class="line">    3-2、连接npm账户</span><br><span class="line">        3-2-1、如果是本机第一次发布npm包</span><br><span class="line">               在终端中运行命令：npm addUser 提示输入账号，密码和邮箱，然后将提示创建成功</span><br><span class="line">        3-2-2、非第一次发布npm包</span><br><span class="line">               在终端输入npm login，然后输入你创建的账号和密码，和邮箱，登陆</span><br><span class="line">    3-3、发布npm包</span><br><span class="line">         npm publish</span><br><span class="line">    3-4、更新npm发布后的包</span><br><span class="line">         更新npm包也是使用npm publish命令发布，不过必须更改npm包的版本号，也就是package.json中的version字段，否则会报错</span><br><span class="line">    3-5、撤销命令 （一般是慎重撤销）         </span><br><span class="line">         npm unpublish 包名@版本号 --force</span><br><span class="line">         eg:npm unpublish testtoast@1.0.0 --force</span><br><span class="line">         说明：撤销发布的包被认为是一种不好的行为，因为如果有团队使用和依赖你的包时，撤销便会造成很大的影响。</span><br><span class="line">         1.根据规范，只有在发包的24小时内才允许撤销发布的包</span><br><span class="line">         2.即使你撤销了发布的包，发包的时候也不能再和被撤销的包的名称和版本重复了（即不能名称相同，版本相同，因为这两者构成的唯一标识已经被“占用”了）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">可能遇到的错误</span><br><span class="line">1、需要提高版本号</span><br><span class="line"></span><br><span class="line">#1、发包 npm publish 失败</span><br><span class="line">sh-neverleave:z-tool neverleave$ npm publish</span><br><span class="line">npm ERR! publish Failed PUT 400</span><br><span class="line">npm ERR! code E400</span><br><span class="line">npm ERR! deprecations must be strings : z-tool</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T10_52_01_742Z-debug.log</span><br><span class="line">sh-neverleave:z-tool neverleave$ npm publish</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2、发包 npm publish 失败</span><br><span class="line">sh-neverleave:z-tool neverleave$ npm publish</span><br><span class="line">npm ERR! publish Failed PUT 403</span><br><span class="line">npm ERR! code E403</span><br><span class="line">npm ERR! You cannot publish over the previously published versions: 1.0.3. : z-tool</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T11_24_57_662Z-debug.log</span><br><span class="line">sh-neverleave:z-tool neverleave$ </span><br><span class="line">2、发包 npm publish 失败</span><br><span class="line">解决方案：终端执行： npm publish --access public</span><br><span class="line"></span><br><span class="line">参考：https://stackoverflow.com/questions/53420758/npm-publish-gives-unscoped-packages-cannot-be-private</span><br><span class="line"></span><br><span class="line">#1、发包 npm publish 失败</span><br><span class="line">sh-neverleave:npm neverleave$ npm publish</span><br><span class="line">npm ERR! publish Failed PUT 400</span><br><span class="line">npm ERR! code E400</span><br><span class="line">npm ERR! unscoped packages cannot be private : z-tool</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T08_44_21_310Z-debug.log</span><br><span class="line">sh-neverleave:npm neverleave$ </span><br><span class="line"></span><br><span class="line">#解决方案：终端执行： npm publish --access public</span><br><span class="line">sh-neverleave:npm neverleave$ npm publish --access public</span><br><span class="line">+ z-tool@1.0.0</span><br><span class="line">sh-neverleave:npm neverleave$ </span><br><span class="line">3、确保登录的用户账号正确</span><br><span class="line"></span><br><span class="line">sh-neverleave:npm neverleave$ npm publish</span><br><span class="line">npm ERR! publish Failed PUT 404</span><br><span class="line">npm ERR! code E404</span><br><span class="line">npm ERR! 404 User not found : z-tool</span><br><span class="line">npm ERR! 404 </span><br><span class="line">npm ERR! 404  &apos;z-tool&apos; is not in the npm registry.</span><br><span class="line">npm ERR! 404 You should bug the author to publish it (or use the name yourself!)</span><br><span class="line">npm ERR! 404 </span><br><span class="line">npm ERR! 404 Note that you can also install from a</span><br><span class="line">npm ERR! 404 tarball, folder, http url, or git url.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T07_32_28_518Z-debug.log</span><br><span class="line">4、登录时需要在username 前加‘~’，具体大家可以验证</span><br><span class="line"></span><br><span class="line">sh-neverleave:npm neverleave$ npm login</span><br><span class="line">Username: (~neverleave) neverleave</span><br><span class="line">Password: (&lt;default hidden&gt;) </span><br><span class="line">Email: (this IS public) (1063588359@qq.com) </span><br><span class="line">npm ERR! code EAUTHIP</span><br><span class="line">npm ERR! Unable to authenticate, need: Basic</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T07_27_50_877Z-debug.log</span><br><span class="line">sh-neverleave:npm neverleave$ </span><br><span class="line">5、无权限删除线上的包（撤包有时间限制，24小时）</span><br><span class="line">解决方案：加上 --force</span><br><span class="line"></span><br><span class="line">sh-neverleave:z-tool neverleave$ npm unpublish z-tool</span><br><span class="line">npm ERR! Refusing to delete entire project.</span><br><span class="line">npm ERR! Run with --force to do this.</span><br><span class="line">npm ERR! npm unpublish [&lt;@scope&gt;/]&lt;pkg&gt;[@&lt;version&gt;]</span><br><span class="line">sh-neverleave:z-tool neverleave$ </span><br><span class="line"></span><br><span class="line">#解决方案（内部有被鄙视的话，😄 I sure hope you know what you are doing.）</span><br><span class="line">sh-neverleave:z-tool neverleave$ npm unpublish z-tool --force</span><br><span class="line">npm WARN using --force I sure hope you know what you are doing.</span><br><span class="line">- z-tool</span><br><span class="line">sh-neverleave:z-tool neverleave$ </span><br><span class="line">6、删除npm市场的包同名的24小时后才能重新发布</span><br><span class="line"></span><br><span class="line">sh-neverleave:z-tool neverleave$ npm publish</span><br><span class="line">npm ERR! publish Failed PUT 403</span><br><span class="line">npm ERR! code E403</span><br><span class="line">npm ERR! z-tool cannot be republished until 24 hours have passed. : z-tool</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T11_41_24_086Z-debug.log</span><br><span class="line">sh-neverleave:z-tool neverleave$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js 正则校验</title>
      <link href="/2020/03/17/js_03/"/>
      <url>/2020/03/17/js_03/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 不允许输入特殊字符</span><br><span class="line">value.replace(/[^u4e00-u9fa5w]/g, &quot;&quot;)</span><br><span class="line">//只允许输入正整数</span><br><span class="line">value.replace(/^(0+)|[^\d]+/g, &quot;&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo 发布命令</title>
      <link href="/2020/03/11/hexo_01/"/>
      <url>/2020/03/11/hexo_01/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g == hexo generate#生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy#部署</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">每次发布时，使用 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react 上传图片裁剪</title>
      <link href="/2020/03/11/react_03/"/>
      <url>/2020/03/11/react_03/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">import Cropper from &quot;react-cropper&quot;;</span><br><span class="line">import &quot;cropperjs/dist/cropper.css&quot;;</span><br><span class="line"></span><br><span class="line">public cropperModal() &#123;</span><br><span class="line">    return &lt;div className=&#123;styles[&quot;class-cropper-modal&quot;]&#125;&gt;</span><br><span class="line">        &lt;div className=&#123;styles[&quot;modal-panel&quot;]&#125;&gt;</span><br><span class="line">            &lt;div className=&#123;styles[&quot;cropper-container-container&quot;]&#125;&gt;</span><br><span class="line">                &lt;div className=&#123;styles[&quot;cropper-container&quot;]&#125;&gt;</span><br><span class="line">                    &lt;Cropper</span><br><span class="line">                        src=&#123;this.state.src&#125;</span><br><span class="line">                        className=&quot;cropper&quot;</span><br><span class="line">                        ref=&quot;cropper&quot;</span><br><span class="line">                        viewMode=&#123;1&#125;</span><br><span class="line">                        movable=&#123;false&#125;</span><br><span class="line">                        zoomable=&#123;false&#125;  // 是否允许放大图像</span><br><span class="line">                        aspectRatio=&#123;1&#125; // 固定为1:1  可以自己设置比例, 默认情况为自由比例</span><br><span class="line">                        guides=&#123;true&#125;</span><br><span class="line">                        background=&#123;false&#125; // 是否显示背景的马赛克</span><br><span class="line">                        rotatable=&#123;false&#125; // 是否旋转</span><br><span class="line">                        preview=&quot;.cropper-preview&quot;</span><br><span class="line">                        cropBoxResizable=&#123;false&#125;</span><br><span class="line">                        style=&#123;&#123; height: &quot;100%&quot;, width: CLIENTWIDTH &#125;&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div className=&#123;styles[&quot;preview-container&quot;]&#125;&gt;</span><br><span class="line">                    &lt;div className=&#123;styles[&quot;cropper-preview&quot;]&#125; /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div style=&#123;&#123;</span><br><span class="line">                    position: &quot;fixed&quot;, right: &quot;10px&quot;, top: &quot;10px&quot;,</span><br><span class="line">                    width: &quot;60px&quot;, height: &quot;30px&quot;, backgroundColor: &quot;rgb(255, 166, 54)&quot;,</span><br><span class="line">                    color: &quot;#fff&quot;, borderRadius: &quot;4px&quot;, display: &quot;flex&quot;,</span><br><span class="line">                    alignItems: &quot;center&quot;, justifyContent: &quot;center&quot;,</span><br><span class="line">                &#125;&#125; onClick=&#123;this.handleSubmit.bind(this)&#125;&gt;</span><br><span class="line">                    保存</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public async handleSubmit() &#123;</span><br><span class="line">    (this.refs.cropper as any).getCroppedCanvas().toBlob(async blob =&gt; &#123;</span><br><span class="line">       // 上传操作</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.class-cropper-modal &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    background-color: rgba(0, 0, 0, 0.3);</span><br><span class="line">    top: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.modal-panel &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background: white;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    align-items: stretch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cropper-container-container &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: stretch;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cropper-container &#123;</span><br><span class="line">    flex: 0 0 600px;</span><br><span class="line">    margin-right: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cropper-container img &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cropper &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.preview-container &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cropper-preview &#123;</span><br><span class="line">    width: 180px;</span><br><span class="line">    height: 180px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    border: 1px solid #383838;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js验证函数</title>
      <link href="/2020/02/07/js_02/"/>
      <url>/2020/02/07/js_02/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 判断手机号是否正确</span><br><span class="line">function isEffectPhone(phone: any) &#123;</span><br><span class="line">    const reg = /^[1][3,4,5,6,7,8][0-9]&#123;9&#125;$/;</span><br><span class="line">    if (!reg.test(phone)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 判断传入时间是否大于当前实际时间</span><br><span class="line">export function contrastTime(start) &#123;</span><br><span class="line">    return start.getTime() - new Date().getTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//获取屏幕宽度</span><br><span class="line">function getClientWidth() &#123;</span><br><span class="line">    const width = (document.documentElement &amp;&amp; document.documentElement.clientWidth) ?</span><br><span class="line">        document.documentElement.clientWidth : document.body.clientWidth;</span><br><span class="line">    return (width &lt;= 1470);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">截取字符串后几位</span><br><span class="line">function subStringEnd(string, n: number) &#123;</span><br><span class="line">    return string.substring(string.length - n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 根据数据获取所有值的和</span><br><span class="line">function getSum(arr, type?: string) &#123;</span><br><span class="line">    let result = 0;</span><br><span class="line">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        if (type) &#123;</span><br><span class="line">            result += (arr[i][type] * 1000);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result / 1000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 隐藏手机号中间四位</span><br><span class="line">function getTel(tel: string) &#123;</span><br><span class="line">    return tel.substring(0, 3) + &apos;****&apos; + tel.substring(tel.length - 4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 判断手机是iod/android</span><br><span class="line">function checkPlatform() &#123;</span><br><span class="line">    if (/android/i.test(navigator.userAgent)) &#123;</span><br><span class="line">        // console.log(&quot;This is Android&apos;browser.&quot;);//这是Android平台下浏览器</span><br><span class="line">        return &apos;0&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) &#123;</span><br><span class="line">        // console.log(&quot;This is iOS&apos;browser.&quot;);//这是iOS平台下浏览器</span><br><span class="line">        return &apos;1&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (/Linux/i.test(navigator.userAgent)) &#123;</span><br><span class="line">        // console.log(&quot;This is Linux&apos;browser.&quot;);//这是Linux平台下浏览器</span><br><span class="line">        return &apos;2&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (/Linux/i.test(navigator.platform)) &#123;</span><br><span class="line">        // console.log(&quot;This is Linux operating system.&quot;);//这是Linux操作系统平台</span><br><span class="line">        return &apos;2&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (/MicroMessenger/i.test(navigator.userAgent)) &#123;</span><br><span class="line">        // console.log(&quot;This is MicroMessenger&apos;browser.&quot;);//这是微信平台下浏览器</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 生成随机的n位数</span><br><span class="line">function generateFiveRandomNum(n) &#123;</span><br><span class="line">    let code = &apos;&apos;;</span><br><span class="line">    for (let i = 0; i &lt; n+1; i++) &#123;</span><br><span class="line">        code += Math.floor(Math.random() * 10);</span><br><span class="line">    &#125;</span><br><span class="line">    return code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// blob转base64</span><br><span class="line">function blobToDataURI(blob: any, callback: any) &#123;</span><br><span class="line">    var reader = new FileReader();</span><br><span class="line">    reader.onload = function (e: any) &#123;</span><br><span class="line">        callback(e.target.result);</span><br><span class="line">    &#125;</span><br><span class="line">    reader.readAsDataURL(blob);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js图片相关操作</title>
      <link href="/2020/02/07/js_01/"/>
      <url>/2020/02/07/js_01/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">base64转Blob</span><br><span class="line"></span><br><span class="line">function base64ToBlob(base64) &#123;</span><br><span class="line">    return new Promise(resolve =&gt; &#123;</span><br><span class="line">        if (typeof base64 !== &quot;string&quot;) &#123;</span><br><span class="line">            return resolve(base64);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        const bytes = window.atob(base64.split(&quot;,&quot;)[1]);</span><br><span class="line">        // 处理异常，将ascii码小于0的转换为大于0</span><br><span class="line">        const buffer = new ArrayBuffer(bytes.length);</span><br><span class="line">        const arr = new Uint8Array(buffer);</span><br><span class="line">        for (let i = 0; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            arr[i] = bytes.charCodeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        resolve(new Blob([buffer], &#123; type: &quot;image/jpeg&quot; &#125;));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">base64转File</span><br><span class="line"></span><br><span class="line"> public dataURLtoFile(dataurl, filename) &#123; // 将base64转换为文件</span><br><span class="line">    const arr = dataurl.split(&quot;,&quot;);</span><br><span class="line">    const mime = arr[0].match(/:(.*?);/)[1];</span><br><span class="line">    const bstr = atob(arr[1]);</span><br><span class="line">    let n = bstr.length;</span><br><span class="line">    const u8arr = new Uint8Array(n);</span><br><span class="line">    while (n--) &#123;</span><br><span class="line">        u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">    &#125;</span><br><span class="line">    return new File([u8arr], filename, &#123; type: mime &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">base64转ArrayBuffer对象</span><br><span class="line"></span><br><span class="line">function base64ToArrayBuffer(base64) &#123;</span><br><span class="line">    base64 = base64.replace(/^data\:([^\;]+)\;base64,/gmi, &quot;&quot;);</span><br><span class="line">    const binary = atob(base64);</span><br><span class="line">    const len = binary.length;</span><br><span class="line">    const buffer = new ArrayBuffer(len);</span><br><span class="line">    const view = new Uint8Array(buffer);</span><br><span class="line">    for (let i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        view[i] = binary.charCodeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    return buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">获取图片的exif的角度</span><br><span class="line"></span><br><span class="line">function getOrientation(arrayBuffer) &#123;</span><br><span class="line">        const dataView = new DataView(arrayBuffer);</span><br><span class="line">    let length = dataView.byteLength;</span><br><span class="line">    let orientation;</span><br><span class="line">    let exifIDCode;</span><br><span class="line">    let tiffOffset;</span><br><span class="line">    let firstIFDOffset;</span><br><span class="line">    let littleEndian;</span><br><span class="line">    let endianness;</span><br><span class="line">    let app1Start;</span><br><span class="line">    let ifdStart;</span><br><span class="line">    let offset;</span><br><span class="line">    let i;</span><br><span class="line">    // Only handle JPEG image (start by 0xFFD8)</span><br><span class="line">    if (dataView.getUint8(0) === 0xFF &amp;&amp; dataView.getUint8(1) === 0xD8) &#123;</span><br><span class="line">        offset = 2;</span><br><span class="line">        while (offset &lt; length) &#123;</span><br><span class="line">            if (dataView.getUint8(offset) === 0xFF &amp;&amp; dataView.getUint8(offset + 1) === 0xE1) &#123;</span><br><span class="line">                app1Start = offset;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            offset++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (app1Start) &#123;</span><br><span class="line">        exifIDCode = app1Start + 4;</span><br><span class="line">        tiffOffset = app1Start + 10;</span><br><span class="line">        if (getStringFromCharCode(dataView, exifIDCode, 4) === &quot;Exif&quot;) &#123;</span><br><span class="line">            endianness = dataView.getUint16(tiffOffset);</span><br><span class="line">            littleEndian = endianness === 0x4949;</span><br><span class="line"></span><br><span class="line">            if (littleEndian || endianness === 0x4D4D /* bigEndian */) &#123;</span><br><span class="line">                if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) &#123;</span><br><span class="line">                    firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);</span><br><span class="line"></span><br><span class="line">                    if (firstIFDOffset &gt;= 0x00000008) &#123;</span><br><span class="line">                        ifdStart = tiffOffset + firstIFDOffset;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (ifdStart) &#123;</span><br><span class="line">        length = dataView.getUint16(ifdStart, littleEndian);</span><br><span class="line"></span><br><span class="line">        for (i = 0; i &lt; length; i++) &#123;</span><br><span class="line">            offset = ifdStart + i * 12 + 2;</span><br><span class="line">            if (dataView.getUint16(offset, littleEndian) === 0x0112 /* Orientation */) &#123;</span><br><span class="line"></span><br><span class="line">                // 8 is the offset of the current tag&apos;s value</span><br><span class="line">                offset += 8;</span><br><span class="line"></span><br><span class="line">                // Get the original orientation value</span><br><span class="line">                orientation = dataView.getUint16(offset, littleEndian);</span><br><span class="line"></span><br><span class="line">                // Override the orientation with its default value for Safari (#120)</span><br><span class="line">                if (true) &#123;</span><br><span class="line">                    dataView.setUint16(offset, 1, littleEndian);</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return orientation;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">ios图片旋转问题</span><br><span class="line"></span><br><span class="line">function rotateImg(img, direction, canvas) &#123;</span><br><span class="line">    // 最小与最大旋转方向，图片旋转4次后回到原方向</span><br><span class="line">    // tslint:disable-next-line:variable-name</span><br><span class="line">    const min_step = 0;</span><br><span class="line">    // tslint:disable-next-line:variable-name</span><br><span class="line">    const max_step = 3;</span><br><span class="line">    if (img == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    const height = img.height;</span><br><span class="line">    const width = img.width;</span><br><span class="line">    let step = 2;</span><br><span class="line">    if (step == null) &#123;</span><br><span class="line">        step = min_step;</span><br><span class="line">    &#125;</span><br><span class="line">    if (direction === &quot;right&quot;) &#123;</span><br><span class="line">        step++;</span><br><span class="line">        // 旋转到原位置，即超过最大值</span><br><span class="line">        // tslint:disable-next-line:no-unused-expression</span><br><span class="line">        step &gt; max_step &amp;&amp; (step = min_step);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        step--;</span><br><span class="line">        // tslint:disable-next-line:no-unused-expression</span><br><span class="line">        step &lt; min_step &amp;&amp; (step = max_step);</span><br><span class="line">    &#125;</span><br><span class="line">    // 旋转角度以弧度值为参数</span><br><span class="line">    const degree = step * 90 * Math.PI / 180;</span><br><span class="line">    const ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class="line">    switch (step) &#123;</span><br><span class="line">        case 0:</span><br><span class="line">            canvas.width = width;</span><br><span class="line">            canvas.height = height;</span><br><span class="line">            ctx.drawImage(img, 0, 0);</span><br><span class="line">            break;</span><br><span class="line">        case 1:</span><br><span class="line">            canvas.width = height;</span><br><span class="line">            canvas.height = width;</span><br><span class="line">            ctx.rotate(degree);</span><br><span class="line">            ctx.drawImage(img, 0, -height);</span><br><span class="line">            break;</span><br><span class="line">        case 2:</span><br><span class="line">            canvas.width = width;</span><br><span class="line">            canvas.height = height;</span><br><span class="line">            ctx.rotate(degree);</span><br><span class="line">            ctx.drawImage(img, -width, -height);</span><br><span class="line">            break;</span><br><span class="line">        case 3:</span><br><span class="line">            canvas.width = height;</span><br><span class="line">            canvas.height = width;</span><br><span class="line">            ctx.rotate(degree);</span><br><span class="line">            ctx.drawImage(img, -width, 0);</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 判断图片大小</span><br><span class="line">function testMaxSize(size, maxSize) &#123;</span><br><span class="line">    let isAllow = false;</span><br><span class="line">    isAllow = size &lt;= maxSize;</span><br><span class="line">    if (!isAllow) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return isAllow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">旋转图片实际例子</span><br><span class="line"></span><br><span class="line">const reader = new FileReader();</span><br><span class="line">reader.readAsDataURL(file);</span><br><span class="line">reader.onload = () =&gt; &#123;</span><br><span class="line">    dealImage(reader.result, file, 800, (data) =&gt; &#123;</span><br><span class="line">        const size = this.testMaxSize(data.size, 1048576);</span><br><span class="line">        if (!size) &#123;</span><br><span class="line">            Message.error(&quot;图片过大,请上传小于1M的图片&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function dealImage(base64Url, files, w, bacllback) &#123;</span><br><span class="line">    const newImage = new Image();</span><br><span class="line">    let orientation;</span><br><span class="line">    orientation = getOrientation(base64ToArrayBuffer(base64Url));</span><br><span class="line">    newImage.src = base64Url;</span><br><span class="line">    newImage.onload = async () =&gt; &#123;</span><br><span class="line">        const canvas = document.createElement(&quot;canvas&quot;);</span><br><span class="line">        if (orientation &amp;&amp; orientation !== 1) &#123;</span><br><span class="line">            if (orientation === 6) &#123;</span><br><span class="line">                this.rotateImg(newImage, &quot;left&quot;, canvas);</span><br><span class="line">                this.yasuo(canvas.toDataURL(&quot;image/jpeg&quot;, 0.8), w, callback, files);</span><br><span class="line">            &#125; else if (orientation === 8) &#123;</span><br><span class="line">                this.rotateImg(newImage, &quot;right&quot;, canvas);</span><br><span class="line">                this.yasuo(canvas.toDataURL(&quot;image/jpeg&quot;, 0.8), w, callback, files);</span><br><span class="line">            &#125; else if (orientation === 3) &#123;</span><br><span class="line">                this.rotateImg(newImage, &quot;right&quot;, canvas);</span><br><span class="line">                this.rotateImg(newImage, &quot;right&quot;, canvas);</span><br><span class="line">                this.yasuo(canvas.toDataURL(&quot;image/jpeg&quot;, 0.8), w, callback, files);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.yasuo(base64Url, w, callback, files);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function yasuo(base64Url, w, callback, files) &#123;</span><br><span class="line">    let imgWidth;</span><br><span class="line">    let imgHeight;</span><br><span class="line">    let blob: any;</span><br><span class="line">    const img = new Image();</span><br><span class="line">    img.src = base64Url;</span><br><span class="line">    img.onload = async () =&gt; &#123;</span><br><span class="line">        imgWidth = img.width;</span><br><span class="line">        imgHeight = img.height;</span><br><span class="line">        const canvas = document.createElement(&quot;canvas&quot;);</span><br><span class="line">        const ctx: any = canvas.getContext(&quot;2d&quot;);</span><br><span class="line">        if (Math.max(imgWidth, imgHeight) &gt; w) &#123;</span><br><span class="line">            if (imgWidth &gt; imgHeight) &#123;</span><br><span class="line">                canvas.width = w;</span><br><span class="line">                canvas.height = w * imgHeight / imgWidth;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                canvas.height = w;</span><br><span class="line">                canvas.width = w * imgWidth / imgHeight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            canvas.width = imgWidth;</span><br><span class="line">            canvas.height = imgHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);</span><br><span class="line">        blob = await this.dataURLtoFile(canvas.toDataURL(&quot;image/jpeg&quot;, 0.8), files.name);</span><br><span class="line">        callback(blob);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/06/10/immutable_01/"/>
      <url>/2019/06/10/immutable_01/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React Key对渲染的影响</title>
      <link href="/2019/06/10/react_02/"/>
      <url>/2019/06/10/react_02/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用React的开发版本时常会遇到这样的情况：</span><br><span class="line"></span><br><span class="line">渲染列表时，不为数组的每一项设置key，则控制台会警告，</span><br><span class="line">Warning：Each child in an array or iterator should have a unique &apos;key&apos; prop</span><br><span class="line"></span><br><span class="line">常有人为了消除警告，把数组的下标(index)作为key，但是当React渲染列表时，把数组的下标作为</span><br><span class="line">key时不正确的，它能做的，仅仅是消除告警而已，对渲染毫无帮助。</span><br><span class="line"></span><br><span class="line">React的key应该是稳定的，唯一的(只要在列表项中唯一就行)，把数组的下标作为key的缺点在于没有</span><br><span class="line">满足稳定性要求，推荐把id或者uuid等字段作为React的key，减少React对DOM操作</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>列表</title>
      <link href="/2019/04/10/alg-01/"/>
      <url>/2019/04/10/alg-01/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Gitc撤销已经commit但是还没有push的代码</title>
      <link href="/2019/04/09/git_01/"/>
      <url>/2019/04/09/git_01/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在git commit之后，正想着push，突然发现有些东西我们不想push上去</span><br><span class="line">这个时候我们想把提交的撤销掉，重新提交我们想提交的，push我们想要push的</span><br><span class="line">1、找到之前提交的git commit的id</span><br><span class="line">git log </span><br><span class="line">找到想要撤销的id</span><br><span class="line">2、git reset -hard id</span><br><span class="line">完成撤销，同时将代码恢复到前commit_id对应的版本，强制回滚到之前的版本</span><br><span class="line">3、git reset id</span><br><span class="line">完成撤销，停留在当前版本，不对代码修改进行撤销，可以直接通过git commit重新提交对本地代码的修改。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用nw.js打包react项目</title>
      <link href="/2019/04/09/face_02/"/>
      <url>/2019/04/09/face_02/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">nw.js原名node-webkit，它通过Chromium内核，可以在node环境下模拟浏览器运行时，因此可以将js封装成独立应用，从而实现跨平台。</span><br><span class="line"></span><br><span class="line">#### nw.js安装</span><br><span class="line">官方地址https://nwjs.io/，选择对应你自己的系统，开发的话可以下载SDK，SDK可以打开控制台，上线之类的可以选择Normal版本。</span><br><span class="line"></span><br><span class="line">#### 准备index.html文件</span><br><span class="line">将react项目build之后，将build目录下的文件拷贝到刚才下载的文件夹里面，和nw.exe同目录</span><br><span class="line"></span><br><span class="line">#### 准备package.json</span><br><span class="line">最后需要新建一个package.json文件，这是nw打包的配置文件和入口文件，最基础的是name，main</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    name: &apos;nwDemo&apos;,</span><br><span class="line">    main: &apos;index.html&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">将package.json文件拷贝到nw.exe同目录下，运行nw.exe即可</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 人脸识别 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用React和face-api.js提供面部识别</title>
      <link href="/2019/03/21/face_01/"/>
      <url>/2019/03/21/face_01/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    face-api.js提供了Tiny Face Detector、SSD mobileNet和MTCNN三种模型，此API人脸识别的原理就是一旦检测到一</span><br><span class="line">个或多个人脸，人脸检测器模型将返回每个人脸的边界框，告诉我们人脸在图像中的位置。然后利用人脸标志网络对人脸标志进行68</span><br><span class="line">个点的标记，在人脸识别网络进行输入前，利用对齐模型确定人脸的中心位置。</span><br><span class="line">    人脸识别网络是另一个神经网络返回一个人脸描述符（特征向量包含128个值），我们可以用它来比较和识别图像中的人。就像</span><br><span class="line">指纹一样，脸部描述符是每个脸部的独特价值。当我们比较它们时，来自不同图像源的同一个人的人脸描述符应该非常接近。在这个</span><br><span class="line">项目中，我们使用欧几里德距离进行比较。如果距离小于我们设定的阈值，我们确定他们可能是同一个人。 （距离越远，信心越高）</span><br><span class="line">    通常，系统将每个人的面部描述符与他或她的名称一起存储为标记。当我们提供查询图像时，系统会将新图像的脸部描述符与所</span><br><span class="line">有参考描述符进行比较，并识别具有最低图像描述符的人。如果没有比较低于阈值的人，则该人将被识别为未知。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">今天这里实现两个功能。一种是从输入图像中识别，另一种是使用实时视频作为输入。</span><br><span class="line">让我们从create-react-app开始，安装react-router-dom，然后启动App</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create-react-app face-demo</span><br><span class="line">cd face-demo</span><br><span class="line">yarn add react-router-dom</span><br><span class="line"></span><br><span class="line">yarn start</span><br><span class="line">这时会自动打开默认的页面</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将src/App.js文件用react-router-dom设置一下</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 人脸识别 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css3隔行变色</title>
      <link href="/2019/01/15/css_01/"/>
      <url>/2019/01/15/css_01/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">div:nth-of-type(odd)&#123;background:#fff&#125;  /*奇数行*/</span><br><span class="line"></span><br><span class="line">div:nth-of-type(even)&#123;background:#000&#125;   /*偶数行 */</span><br><span class="line"></span><br><span class="line">div:nth-child(4n+1)&#123;background:#fff&#125;  /*从第一行开始算起 每隔四个（包含第四个）使用此样式*/</span><br><span class="line"></span><br><span class="line">div:nth-child(4n+2)&#123;background:#fff&#125;  /*从第二行开始算起 每隔四个（包含第四个）使用此样式*/</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:nth-child(n)&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">找出E元素,且它是你北朝鲜绵第n个子元素.n可以是数字(1,2,3),关键字(odd,even),公式(2n,2n+3),数字是从1开始的,不是0.如:</span><br><span class="line"></span><br><span class="line">tr:nth-child(3)匹配所有表格里第3行的tr</span><br><span class="line"></span><br><span class="line">tr:nth-child(2n+1)匹配所有表格的奇数行</span><br><span class="line"></span><br><span class="line">tr:nth-child(2n)匹配所有的偶数行</span><br><span class="line"></span><br><span class="line">tr:nth-child(odd)匹配所有的奇数行</span><br><span class="line"></span><br><span class="line">tr:nth-child(even)匹配所有的偶数行</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:nth-last-child(n)&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">选择E元素,且它是父元素的倒数第n个子元素</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:nth-of-type(n)&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">选择E元素,且它是父元素所有子元素中类型为E的子元素集合中的第n个,n可以是数字(1,2,3),关键字(odd,even),公式(2n,2n+3),数字是从1开始的,不是0.如p:nth-of-type(2)匹配出,&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;中第二个p元素</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:nth-last-of-type(n)&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">选择E元素,且它是父元素的倒数第n个子节点</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:last-child&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">找出E元素,且它是父元素中的最后一个字节点</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:first-of-tpe&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">找出E元素,且它是父元素中是第一个该类型的元素,如p:first-of-type匹配&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;中的第一个p元素.</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:last-of-type&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">找出E元素,且它是父元素中的最后一个该类型的元素.如:p:last-of-type匹配,&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;中的最后一个p元素,它同E:nth-last-of-tpe(1)意义相同</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:only-child&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">找出父元素中只包括一个的子元素,且该元素是E</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:only-of-type&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">选择其父元素只包含一个同类型的子元素,且该子元素匹配E.如p:only-of-type匹配&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;中的p,因为div中只包括一个p元素</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:empty&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">匹配E元素,且该元素不包含子节点,注意,文字也属于节点</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>超过固定宽度(或行数)显示...(或省略)</title>
      <link href="/2019/01/15/css_02/"/>
      <url>/2019/01/15/css_02/</url>
      
        <content type="html"><![CDATA[<p>作为前端经常遇到的一个需求。对于一些比较长的文本做限制，不显示，或者显示省略号。今天整理一下。</p><h3 id="1、超出固定长度显示…"><a href="#1、超出固定长度显示…" class="headerlink" title="1、超出固定长度显示…"></a>1、超出固定长度显示…</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.class &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    overflow: hidden; //这个是设置隐藏的。还有其他的，例如scroll，是超出固定长度，底部显示滚动条的。</span><br><span class="line">    text-overflow: ellipsis; //这个就是设置直接隐藏掉文字，还是显示...的。当前是显示省略号，直接省略是clip。</span><br><span class="line">    display: inline-block; //根据不同标签display值，有的不用加</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、超出固定行数显示…"><a href="#2、超出固定行数显示…" class="headerlink" title="2、超出固定行数显示…"></a>2、超出固定行数显示…</h3><p>超出固定行数。显示省略号，和上面差不多。overflow和text-overflow见上方解释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.class &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    -webkit-line-clamp: 2; //这里就是设置超出几行隐藏</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    display: -webkit-box; //根据不同标签display，有的不用加。或者设置成别的属性，自己可以随便试试</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="巨坑提醒-多行隐藏"><a href="#巨坑提醒-多行隐藏" class="headerlink" title="巨坑提醒(多行隐藏)"></a>巨坑提醒(多行隐藏)</h4><p>有的时候，你按照上面的设置。就是不生效。或者本地生效了，react（或者vue）打包到服务器上就不生效了。你可以在控制台看看。是不是-webkit-box-orient这个属性消失了。如果是这样的话，请看下面的解决方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//办法1</span><br><span class="line">直接在style里面写上display: -webkit-box; 就行</span><br><span class="line"></span><br><span class="line">//办法2</span><br><span class="line">.class &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    -webkit-line-clamp: 2;</span><br><span class="line">    /* autoprefixer: off */     //对，就是加这两个注释就行.</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    /* autoprefixer: on */</span><br><span class="line">    display:-webkit-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac显示隐藏文件</title>
      <link href="/2019/01/15/mac_01/"/>
      <url>/2019/01/15/mac_01/</url>
      
        <content type="html"><![CDATA[<h5 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h5><p>在macOS Sierra, 我们可以使用快捷键⌘⇧.(Command + Shift + .)来快速(在Finder中)显示和隐藏文件</p><h5 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h5><p>在终端使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//显示隐藏文件</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool true</span><br><span class="line">//不显示隐藏文件</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React Naitve 性能优化</title>
      <link href="/2019/01/15/rn_01/"/>
      <url>/2019/01/15/rn_01/</url>
      
        <content type="html"><![CDATA[<h5 id="1、利用shouldComponentUpdate函数优化react性能以及引入immutable库的必要性-也适用于react-native"><a href="#1、利用shouldComponentUpdate函数优化react性能以及引入immutable库的必要性-也适用于react-native" class="headerlink" title="1、利用shouldComponentUpdate函数优化react性能以及引入immutable库的必要性(也适用于react-native)"></a>1、利用shouldComponentUpdate函数优化react性能以及引入immutable库的必要性(也适用于react-native)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setState()函数在任何情况下都会导致组件重渲染吗？如果setState()中参数还是原来没有发生任何变化的staten？</span><br><span class="line">如果组件的state没有变化，并且从父组件接收的props也没有变化，那它就一定不会重渲染吗？</span><br><span class="line">如果1，2两种情况下都会导致重渲染，我们该如何避免这种冗杂的操作，从而优化性能？</span><br></pre></td></tr></table></figure><p>参考 <a href="https://www.cnblogs.com/penghuwan/p/6707254.html" target="_blank" rel="noopener">https://www.cnblogs.com/penghuwan/p/6707254.html</a></p>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React Native动画</title>
      <link href="/2019/01/15/rn_04/"/>
      <url>/2019/01/15/rn_04/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近项目要做小游戏，小游戏当然就少不了动画了，一开始打算用h5做，但是考虑到内嵌h5坑可能有点多，所以最后还是选择react native的动画（项目本身就是react native写的，之后用rn代表react naitve）<br></p><h5 id="1、requestAnimationFrame"><a href="#1、requestAnimationFrame" class="headerlink" title="1、requestAnimationFrame"></a>1、requestAnimationFrame</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">export default class demo1 Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">  width: 100,</span><br><span class="line">  height: 100</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startAnimation() &#123;</span><br><span class="line">let count = 0;</span><br><span class="line">let &#123; width, height &#125; = this.state;</span><br><span class="line">requestAnimationFrame(() =&gt; &#123;</span><br><span class="line">this.setState(&#123;</span><br><span class="line">widthL: width + 1,</span><br><span class="line">height: height + 1</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">let &#123; width, height &#125; = this.state;</span><br><span class="line">return(</span><br><span class="line">&lt;View style = &#123; styles.container &#125;&gt;</span><br><span class="line">&lt;Image </span><br><span class="line">source = &#123;require(./icon.jpg)&#125;</span><br><span class="line">style = &#123;&#123;</span><br><span class="line">width: width,</span><br><span class="line">height: height</span><br><span class="line">&#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;TouchableOpacity</span><br><span class="line">style = &#123; styles.instructions &#125;</span><br><span class="line">onPress = &#123;()=&gt;this.startAnimation()&#125;</span><br><span class="line">&gt;</span><br><span class="line">&lt;Text style = &#123;&#123;</span><br><span class="line">alignSelf: &apos;center&apos;,</span><br><span class="line">color: &apos;#fff&apos;</span><br><span class="line">&#125;&#125;&gt;</span><br><span class="line">click me!</span><br><span class="line">&lt;/Text&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方式实现的动画有几个问题：<br></p><ul><li>实现方式是通过不断销毁、创建视图来完成，一方面如果你的视图的数据是动态获取的，那么就需要以合适的方式恢复数据；另一方面，这种方式必然造成性能和内存开销的问题。</li><li>如果需要刷新的View的层级比较深，那么这种方式会带来严重的性能问题。</li><li>requestAnimationFrame毕竟是web上css的用法，在手机上，动画的效果比较生硬，如果需要‘弹性动画’，‘淡入淡出’等效果，则是比较难以实现的（需要辅助各种函数）。</li><li><h5 id="2、setNativeProps"><a href="#2、setNativeProps" class="headerlink" title="2、setNativeProps"></a>2、setNativeProps</h5></li></ul><p>如果执意使用修改state的方式，觉得这种方式更符合当前需求对动画的控制，那么则应当使用原生组件的setNativeProps方法来做对应实现，它会直接修改组件底层特性，会重绘组件，因此性能也远胜动态修改组件内联style的方法。<br><br>我们稍微修改下startAnimation方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">startAnimation() &#123;</span><br><span class="line">  var count = 0;</span><br><span class="line">  while (++count &lt; 50) &#123;</span><br><span class="line">  requestAnimationFrame(() = &gt;&#123;</span><br><span class="line">  this.refs.image.setNativeProps(&#123;</span><br><span class="line">  style: &#123;</span><br><span class="line">  width: this.state.width++,</span><br><span class="line">  height: this.state.height++</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中this.refs.image指向的是image视图，效果比上面的好多了。</p><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><p>setNativeProps直接修改组件底层特性，不会重绘组件，因此性能也远胜动态修改组件内联style的方法。</p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ol><li>setNativeProps属于原生视图的方法，如果我们使用一个动画，单纯只是为了跟踪它的值，那么这个方法有点不合时宜。</li><li>还是和上面一种方式一样，如果需要实现‘弹性动画’，‘淡入淡出’等效果，则还是比较麻烦的。</li></ol><h5 id="3、LayoutAnimation"><a href="#3、LayoutAnimation" class="headerlink" title="3、LayoutAnimation"></a>3、LayoutAnimation</h5><p>当布局变化时，自动将视图运动到它们新的位置上。<br><br>一个常用的调用此API的办法是调用LayoutAnimation.configureNext(config)，然后调用setState。<br><br>其中conf参数格式参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">duration: 700,   //持续时间</span><br><span class="line">create: &#123;    //若是新布局的动画类型</span><br><span class="line">type: &apos;linear&apos;,  //线性模式</span><br><span class="line">property: &apos;opacity&apos;  //动画属性，除了opacity还有一个scaleXY可以配置</span><br><span class="line">&#125;,</span><br><span class="line">update: &#123;  //若是布局更新的动画类型</span><br><span class="line">type: &apos;spring&apos;,   //弹跳模式</span><br><span class="line">springDamping: 0.4  //弹跳阻尼系数</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中动画type的类型可枚举为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring //弹跳</span><br><span class="line">linear //线性</span><br><span class="line">easeInEaseOut //缓入缓出</span><br><span class="line">easeIn //缓入</span><br><span class="line">easeOut //缓出</span><br><span class="line">keyboard // 键入</span><br></pre></td></tr></table></figure><p>要注意的时，安卓平台使用LayoutAnimation动画必须加上这么一句代码(否则动画会失效):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIManager.setLayoutAnimationEnabledExperimental &amp;&amp; UIManager.setLayoutAnimationEnabledExperimental(true);</span><br></pre></td></tr></table></figure><p>于是我们一开始的动画就可以这么来写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">export default class demo2 extends Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">w: 200,</span><br><span class="line">h: 20</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_onPress() &#123;</span><br><span class="line">LayoutAnimation.configureNext(&#123;</span><br><span class="line">duration: 700,</span><br><span class="line">create: &#123;</span><br><span class="line">type: &apos;linear&apos;,</span><br><span class="line">property: &apos;opacity&apos;</span><br><span class="line">&#125;,</span><br><span class="line">update: &#123;</span><br><span class="line">type: &apos;spring&apos;,</span><br><span class="line">springDamping: 0.4</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">this.setState(&#123;</span><br><span class="line">w: this.state.w + 30,</span><br><span class="line">h: this.state.h + 30</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">return(</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;View style=&#123;[styles.content, &#123;width: this.state.w, height: this.state.h&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;TouchableOpacity onPress=&#123;this._onPress&#125;&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;Press me!&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;TouchableOpacity&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;忽略本按钮&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">)</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样动画灵活和流畅多了，<br>我们上面看到的仅仅是局部更新的情况，我们来看看新布局被创建（有新组建加入到视图上）的情况如何：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">export default class demo3 extends Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">showNewOne: false,</span><br><span class="line">w: 200,</span><br><span class="line">h: 20</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> _onPress() &#123;</span><br><span class="line">LayoutAnimation.configureNext(&#123;</span><br><span class="line">duration: 1200,</span><br><span class="line">create: &#123;</span><br><span class="line">type: &apos;linear&apos;,</span><br><span class="line">property: &apos;opacity&apos;  //注意这里，我们设置新布局被创建时的动画特性为透明度</span><br><span class="line">&#125;,</span><br><span class="line">update: &#123;</span><br><span class="line">type: &apos;spring&apos;,</span><br><span class="line">springDamping: 0.4</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">this.setState(&#123;w: this.state.w + 30, h: this.state.h + 30, showNewOne : true&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">let &#123; showNewOne &#125; = this.state;</span><br><span class="line">let newOne = showNewOne ?</span><br><span class="line">(</span><br><span class="line">&lt;View style=&#123;[styles.content, &#123;width: this.state.w, height: this.state.h&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;new one&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">) : null;</span><br><span class="line">return(</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;View style=&#123;[styles.content, &#123;width: this.state.w, height: this.state.h&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&#123;newOne&#125;</span><br><span class="line">&lt;TouchableOpacity onPress=&#123;this._onPress&#125;&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;Press me!&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;TouchableOpacity&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;忽略本按钮&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、Animated"><a href="#4、Animated" class="headerlink" title="4、Animated"></a>4、Animated</h5><p>通过Animated我们可以在确保性能良好的前提下创造更为灵活丰富且易维护的动画。<br><br>不同于上述的动画实现方式，我们得在 Animated.View、Animated.Text 或 Animated.Image 动画组件上运用 Animate 模块的动画能力(如果有在其他组件上的需求，可以使用Animated.createAnimatedComponent方法来对其它类型的组件创建动画)<br><br>下面来个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &#123;</span><br><span class="line">AppRegistry,</span><br><span class="line">StyleSheet,</span><br><span class="line">Text,</span><br><span class="line">View,</span><br><span class="line">Easing,</span><br><span class="line">Animated,</span><br><span class="line">TouchableOpacity,</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line"></span><br><span class="line">const _animateHandler;</span><br><span class="line">export default class demo4 extends Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">opacityAnmValue: new Animated.Value(0)</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">_animateHandler = Animated.timing(</span><br><span class="line">this.state.opacityAnmValue,</span><br><span class="line">&#123;</span><br><span class="line">toValue: 1,  //透明度动画最终值</span><br><span class="line">duration: 3000, </span><br><span class="line">easing: Easing.bezier(0.15,0.73,0.37,1.2) //缓冲函数</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_onPress() &#123;</span><br><span class="line">_animateHandler.start &amp;&amp; _animateHandler.start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">return(</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;Animated.View ref=&quot;view&quot; style=&#123;[styles.content, &#123;width: 200, height: 20, opacity: this.state.opacityAnmValue&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/Animated.View&gt;</span><br><span class="line">&lt;TouchableOpacity onPress=&#123;this._onPress&#125;&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;Press me!&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;TouchableOpacity &gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;忽略本按钮&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">container: &#123;</span><br><span class="line">flex: 1,</span><br><span class="line">justifyContent: &apos;center&apos;,</span><br><span class="line">alignItems: &apos;center&apos;</span><br><span class="line">&#125;,</span><br><span class="line">content: &#123;</span><br><span class="line">justifyContent: &apos;center&apos;,</span><br><span class="line">backgroundColor: &apos;yellow&apos;,</span><br><span class="line">&#125;,</span><br><span class="line">button: &#123;</span><br><span class="line">marginTop: 10,</span><br><span class="line">paddingVertical: 10,</span><br><span class="line">paddingHorizontal: 20,</span><br><span class="line">backgroundColor: &apos;black&apos;</span><br><span class="line">&#125;,</span><br><span class="line">buttonText: &#123;</span><br><span class="line">color: &apos;white&apos;,</span><br><span class="line">fontSize: 16,</span><br><span class="line">fontWeight: &apos;bold&apos;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>点击按钮后,Animated.View会以bezier曲线形式执行时长3秒的透明度动画(由0到1):<br></p><p>1、以 new Animated.Value(0) 实例化动画的初始值给state：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.state = &#123;</span><br><span class="line">//设置透明度动画初始值</span><br><span class="line">opacityAnmValue: new Animated.Value(0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、通过 Animated.timing 我们定义了一个动画事件，在后续可以以 .start() 或 .stop() 方法来开始/停止该动画：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">_animateHandler = Animated.timing(this.state.opacityAnmValue, &#123;</span><br><span class="line">toValue: 1,  //透明度动画最终值</span><br><span class="line">duration: 3000,   //动画时长3000毫秒</span><br><span class="line">easing: Easing.bezier(0.15, 0.73, 0.37, 1.2)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在点击事件中触发了动画的.start方法让它跑起来:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_onPress() &#123;</span><br><span class="line">_animateHandler.start &amp;&amp; _animateHandler.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>start 方法接受一个回调函数，会在动画结束时触发，并传入一个参数 {finished: true/false}，若动画是正常结束的，finished 字段值为true，若动画是因为被调用 .stop() 方法而提前结束的，则 finished 字段值为false。<br></p><p>3、动画的绑定是在 上的，我们把实例化的动画初始值传入 style 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Animated.View ref=&quot;view&quot; style=&#123;[styles.content, &#123;width: 200, height: 20, opacity: this.state.opacityAnmValue&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/Animated.View&gt;</span><br></pre></td></tr></table></figure><p>然后。。。就没有然后了，很简单吧。<br></p><p>这里需要讲一下的应该是定义动画事件的Animated.timing(animateValue, conf) 方法，其中设置参数格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  duration: 动画持续的时间（单位是毫秒），默认为500。</span><br><span class="line">  easing：一个用于定义曲线的渐变函数。阅读Easing模块可以找到许多预定义的函数。iOS默认为Easing.inOut(Easing.ease)。</span><br><span class="line">  delay: 在一段时间之后开始动画（单位是毫秒），默认为0。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里提及的 Easing 动画函数模块在 react-native/Libraries/Animated/src/ 目录下，该模块预置了 linear、ease、elastic、bezier 等诸多缓动特性，有兴趣可以去了解。<br></p><p>另外除了 Animated.timing，Animated 还提供了另外两个动画事件创建接口：<br></p><p>1、Animated.spring(animateValue, conf) —— 基础的单次弹跳物理模型，支持origami标准，conf参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  friction: 控制“弹跳系数”、夸张系数，默认为7。</span><br><span class="line">  tension: 控制速度，默认40。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &#123;</span><br><span class="line">AppRegistry,</span><br><span class="line">StyleSheet,</span><br><span class="line">Text,</span><br><span class="line">View,</span><br><span class="line">Easing,</span><br><span class="line">Animated,</span><br><span class="line">TouchableOpacity,</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line"></span><br><span class="line">let _animateHandler;</span><br><span class="line"></span><br><span class="line">export default class demo5 extends Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">bounceValue : new Animated.Value(0)   //设置缩放动画初始值</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">this.state.bounceValue.setValue(1.5);     // 设置一个较大的初始值</span><br><span class="line">_animateHandler = Animated.spring(this.state.bounceValue, &#123;</span><br><span class="line">toValue: 1,</span><br><span class="line">friction: 8,</span><br><span class="line">tension: 35</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_onPress() &#123;</span><br><span class="line">_animateHandler.start &amp;&amp; _animateHandler.start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_reload() &#123;</span><br><span class="line">AppRegistry.reload()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">return(</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;Animated.View ref=&quot;view&quot; style=&#123;[styles.content, &#123;width: 200, height: 20, transform: [&#123;scale: this.state.bounceValue&#125;]&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/Animated.View&gt;</span><br><span class="line">&lt;TouchableOpacity onPress=&#123;this._onPress&#125;&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;Press me!&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;TouchableOpacity onPress=&#123;this._reload&#125;&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;忽略本按钮&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">container: &#123;</span><br><span class="line">flex: 1,</span><br><span class="line">justifyContent: &apos;center&apos;,</span><br><span class="line">alignItems: &apos;center&apos;</span><br><span class="line">&#125;,</span><br><span class="line">content: &#123;</span><br><span class="line">justifyContent: &apos;center&apos;,</span><br><span class="line">backgroundColor: &apos;yellow&apos;,</span><br><span class="line">&#125;,</span><br><span class="line">button: &#123;</span><br><span class="line">marginTop: 10,</span><br><span class="line">paddingVertical: 10,</span><br><span class="line">paddingHorizontal: 20,</span><br><span class="line">backgroundColor: &apos;black&apos;</span><br><span class="line">&#125;,</span><br><span class="line">buttonText: &#123;</span><br><span class="line">color: &apos;white&apos;,</span><br><span class="line">fontSize: 16,</span><br><span class="line">fontWeight: &apos;bold&apos;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>留意这里我们用了 animateValue.setValue(1.5) 方法来修改动画属性值。<br></p><p>2、Animated.decay(animateValue, conf) —— 以一个初始速度开始并且逐渐减慢停止，conf参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  velocity: 起始速度，必填参数。</span><br><span class="line">  deceleration: 速度衰减比例，默认为0.997。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">let _animateHandler;</span><br><span class="line">export default class demo6 extends Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">bounceValue : new Animated.Value(0.1)</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line"> _animateHandler = Animated.decay(this.state.bounceValue, &#123;</span><br><span class="line">toValue: 0.2,</span><br><span class="line">velocity: 0.1</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_onPress() &#123;</span><br><span class="line">_animateHandler.start &amp;&amp; _animateHandler.start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">return(</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;Animated.View ref=&quot;view&quot; style=&#123;[styles.content, &#123;width: 200, height: 30, transform: [&#123;scale: this.state.bounceValue&#125;]&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/Animated.View&gt;</span><br><span class="line">&lt;TouchableOpacity onPress=&#123;this._onPress&#125;&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;Press me!&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;TouchableOpacity&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;忽略本按钮&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于最后介绍的两个动画效果，可能得熟悉一些物理、数学模型才能更好地来做控制，大部分情况下，咱们直接使用 Animated.timing 就足够满足需求了。<br></p><h5 id="监听动画"><a href="#监听动画" class="headerlink" title="监听动画"></a>监听动画</h5><p>1、有时候我们需要在动画的过程中监听到某动画时刻的属性值，可以通过animateValue.stopAnimation(callback) 或 animateValue.addListener(callback) 来实现<br>其中stopAnimation会停止当前动画并在回调函数中返回一个{value : number}对象，value对应最后一刻的动画属性值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">const _animateHandler, _isFirsPress = 0;</span><br><span class="line">export default class demo7 extends Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">opacityAnmValue : new Animated.Value(0)   //设置透明度动画初始值</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">_animateHandler = Animated.timing(</span><br><span class="line">this.state.opacityAnmValue, &#123;</span><br><span class="line">toValue: 1,</span><br><span class="line">duration: 6000,</span><br><span class="line">easing: Easing.linear</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_onPress() &#123;</span><br><span class="line">if(_isFirstPress === 0) &#123;</span><br><span class="line">_animateHandler.start &amp;&amp; _animateHandler.start();</span><br><span class="line">_isFirsPress = 1</span><br><span class="line">&#125; else &#123;</span><br><span class="line">this.state.opacityAnmValue.stopAnimation(value =&gt; &#123;</span><br><span class="line">Alert.alert(</span><br><span class="line">&quot;动画结束，最终值&quot;,</span><br><span class="line">JSON.stringify(value),</span><br><span class="line">[</span><br><span class="line">&#123;text: &apos;OK&apos;, onPress: () =&gt; &#123;&#125;&#125;</span><br><span class="line">]</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">return(</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;Animated.View style=&#123;[styles.content, &#123;width: 200, height: 20, opacity: this.state.opacityAnmValue&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/Animated.View&gt;</span><br><span class="line">&lt;TouchableOpacity onPress=&#123;this._onPress&#125;&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;Press me!&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;TouchableOpacity &gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;忽略本按钮&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而addListener方法会在动画的执行过程中调用callback回调函数，提供一个最近的值作为参数。<br></p><p>2、有时候我们希望在某个交互事件（特别是手势）中更灵活地捕获某个事件对象属性值，并动态赋予某个变量，对于这种需求可以通过 Animated.event 来实现。<br></p><p>它接受一个数组为参数，数组中的层次对应绑定事件参数的相应映射，听着有点绕，看例子就很好理解了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var scrollX = 0,</span><br><span class="line">  pan = &#123;</span><br><span class="line">x: 0,</span><br><span class="line">y: 0</span><br><span class="line">  &#125;;</span><br><span class="line">//...</span><br><span class="line">onScroll : Animated.event(</span><br><span class="line">  [&#123;nativeEvent: &#123;contentOffset: &#123;x: scrollX&#125;&#125;&#125;]   // scrollX = e.nativeEvent.contentOffset.x</span><br><span class="line">)</span><br><span class="line">onPanResponderMove : Animated.event([</span><br><span class="line">  null,          // 忽略原生事件</span><br><span class="line">  &#123;dx: pan.x, dy: pan.y&#125;     // 从gestureState中解析出dx和dy的值</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>onScroll是绑定给某个组件的滚动事件，而onPanResponderMove是 PanResponder 模块下的响应事件。<br></p><p>拿上方onPanResponderMove的例子来讲，该事件方法接收两个参数 e 和 gestureState，其中gestureState的属性有：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">stateID - 触摸状态的ID。在屏幕上有至少一个触摸点的情况下，这个ID会一直有效。</span><br><span class="line">moveX - 最近一次移动时的屏幕横坐标</span><br><span class="line">moveY - 最近一次移动时的屏幕纵坐标</span><br><span class="line">x0 - 当响应器产生时的屏幕坐标</span><br><span class="line">y0 - 当响应器产生时的屏幕坐标</span><br><span class="line">dx - 从触摸操作开始时的累计横向路程</span><br><span class="line">dy - 从触摸操作开始时的累计纵向路程</span><br><span class="line">vx - 当前的横向移动速度</span><br><span class="line">vy - 当前的纵向移动速度</span><br><span class="line">numberActiveTouches - 当前在屏幕上的有效触摸点的数量</span><br></pre></td></tr></table></figure><p>来个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">class AwesomeProject extends Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">transY : new Animated.Value(0)</span><br><span class="line">&#125;;</span><br><span class="line">this._panResponder = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">componentWillMount处预先创建手势响应器</span><br><span class="line">componentWillMount() &#123;</span><br><span class="line">this._panResponder = PanResponder.create(&#123;</span><br><span class="line">onStartShouldSetPanResponder: this._returnTrue.bind(this),</span><br><span class="line">onMoveShouldSetPanResponder: this._returnTrue.bind(this),</span><br><span class="line">//手势开始处理</span><br><span class="line">//手势移动时的处理</span><br><span class="line">onPanResponderMove: Animated.event([null, &#123;</span><br><span class="line">dy : this.state.transY</span><br><span class="line">&#125;])</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_returnTrue(e, gestureState) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;Animated.View style=&#123;[styles.content, &#123;width: this.state.w, height: this.state.h,</span><br><span class="line">transform: [&#123;</span><br><span class="line">  translateY : this.state.transY</span><br><span class="line">&#125;]</span><br><span class="line">&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/Animated.View&gt;</span><br><span class="line">&lt;TouchableOpacity&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125; &#123;...this._panResponder.panHandlers&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;control&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line"></span><br><span class="line">&lt;TouchableOpacity&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;忽略此按钮&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React Native解决&#39;libgnustl_shared.so is 32-bit instead if 64-bit&#39;报错</title>
      <link href="/2019/01/15/rn_02/"/>
      <url>/2019/01/15/rn_02/</url>
      
        <content type="html"><![CDATA[<p>React Native项目在64位Android手机上运行，会提示<br>“/data/data/com.xxx.xxx/lib-main/libgnustl_shared.so”is 32-bit instead of 64-bit这个错误。</p><p>解决方法就是取消掉所有64位的.so文件，全部加载32位的就可以了，下面是步骤</p><ol><li>在项目的根部录的gradle.properties里面添加一行代码，android.useDeprecatedNdk = true.</li><li>在build.gradle文件里添加以下代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line">defaultConfig &#123;</span><br><span class="line">...</span><br><span class="line">ndk &#123;</span><br><span class="line">abiFilters: &quot;armeabi-v7a&quot;,&quot;x86&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">packagingOptions &#123;</span><br><span class="line">exclude &quot;lib/arm64-v8a/librealm-jni.so&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React Naitve 错误集锦</title>
      <link href="/2019/01/15/rn_03/"/>
      <url>/2019/01/15/rn_03/</url>
      
        <content type="html"><![CDATA[<p>1、在android华为手机上运行React-native工程时出现了如下错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">报错：unable to load script from assets &apos;index.android.bundle&apos;, make sure your bundle is packaged correctly or youu’re running a packager server</span><br></pre></td></tr></table></figure><p>解决办法：<br><br>    1、在Android/app/src/main目录下创建一个空的assets文件夹<br><br>    2、进入项目跟目录执行下面代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native bundle --platform android --dev false --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行完毕后assets文件夹下会多出index.android.bundle和index.android.bundle.meta两个文件</span><br></pre></td></tr></table></figure><p>重新运行<br></p><p>总结:<br><br>index.android.bundle是用来调用原生控件的js脚本，每次当改变index.android.js,都需要使用上面的代码片段，来及时的更新index.android.bundle文件，然后打包才可以把新的index.android.js应用上，所以没有index.android.bundle文件时，React-Native项目时无法运行的。</p>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React生命周期</title>
      <link href="/2019/01/15/react_01/"/>
      <url>/2019/01/15/react_01/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">react的生命周期分为四个阶段：初始化阶段、更新阶段、销毁阶段、错误处理阶段</span><br><span class="line"></span><br><span class="line">#### 初始化阶段</span><br><span class="line">- constructor</span><br><span class="line">- static getDerivedStateFromProps</span><br><span class="line">- componentWillMount()</span><br><span class="line">- render</span><br><span class="line">- componentDidmount()</span><br><span class="line"></span><br><span class="line">#### 更新阶段</span><br><span class="line">- componentWillReceiveProps</span><br><span class="line">- static getDerivedStateFromprops()</span><br><span class="line">- shouldComponentUpdate()</span><br><span class="line">- componentWillUpdate()</span><br><span class="line">- render()</span><br><span class="line">- getSnapshotBeforeUpdate()</span><br><span class="line">- componentDidUpdate()</span><br><span class="line"></span><br><span class="line">#### 销毁阶段</span><br><span class="line">- compinentWillUnmount()</span><br><span class="line"></span><br><span class="line">#### 错误处理</span><br><span class="line">- componentDidCatch()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">初始化阶段详细</span><br><span class="line">#### constructor //自动执行，一开始就会执行</span><br><span class="line"></span><br><span class="line">React组件的构造函数在挂载之前被调用。在实现React.Component构造函数时，需要现在添加其他</span><br><span class="line">内容前，调用super(props)，用来将父组件传来的props绑定到这个类中，使用this.props将会得到。</span><br><span class="line"></span><br><span class="line">步子啊这里生命或者执行事件</span><br><span class="line"></span><br><span class="line">constructor中应当做些初始化的动作，如：初始化state，将时间绑定到类实例上，但也不要使用</span><br><span class="line">setState()。如果没有必要初始化state或绑定方法，则不需要构造constructor，或者把这个组件</span><br><span class="line">换成纯函数写法。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### static getDerivedStateFromProps(nextprops) //自动执行，必须有返回值，输出参数为新值</span><br><span class="line"></span><br><span class="line">getDerivedStateFromProps是react16.3之后新增，在组件实例化后，和接受新的props后被调用。</span><br><span class="line">他必须返回一个对象来更新状态，或者返回null表示新的props不需要任何state的更新。</span><br><span class="line"></span><br><span class="line">如果是由于父组件的props更改，所带来的重新渲染，也会触发此方法。调用setState()不会触发getDerivedStateFromProps()</span><br><span class="line"></span><br><span class="line">之前这里都是使用constructor + componentWillRecieveProps完成相同的功能的</span><br><span class="line"></span><br><span class="line">#### componentWillMount() //render()前调用，可以直接修改state自动执行，即将挂载组件</span><br><span class="line"></span><br><span class="line">componentWillMount()将在React未来版本中被弃用，官方都建议使用componentDidMount()代替。这个</span><br><span class="line">方法是用于在服务器渲染上的唯一方法。这个方法因为是在渲染之前被调用，也是唯一一个可以直接同步修改state的地方</span><br><span class="line"></span><br><span class="line">#### render() //直接执行，必须要有的，一般返回html代码</span><br><span class="line"></span><br><span class="line">render()方法是必需的。当他被调用时，他将计算this.props和this.state，并返回以下一种类型：</span><br><span class="line">1、React元素。通过jsx创建，既可以时dom元素，也可以是用户自定义的组件。</span><br><span class="line">2、字符串或数字。他们将会以文本节点形式渲染到dom中</span><br><span class="line">3、Portals。react 16版本中提出的新的解决方案，可以使组件脱离父组件层级直接挂载在DOM树的任何位置。</span><br><span class="line">4、null，什么也不渲染</span><br><span class="line">5、布尔值。也是什么都不渲染。</span><br><span class="line"></span><br><span class="line">当返回null，false，ReactDOM.findDOMNode(this)将会返回null，什么都不会渲染</span><br><span class="line"></span><br><span class="line">render()方法必须是一个纯函数，他不应该改变state，也不能直接和浏览器进行交互，应该将事件</span><br><span class="line">放在其他生命周期函数中。如果shouldComponentUpdate()返回false，render()不会被调用。</span><br><span class="line"></span><br><span class="line">#### componentDidMount()  //直接执行，可以在这里进行网络请求，第三方实例化，拿到真实</span><br><span class="line">dom，写死的数据可以直接写在这里，如果是获取到的会变得数据，则需要使用定时器，不要的话函数</span><br><span class="line">一直再触发，会导致更新不了视图，需要在dom元素更新完之后执行</span><br><span class="line"></span><br><span class="line">componentDidMount在组件被装配后立即调用。初始化使得DOM节点应该进行到这里</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">更新阶段</span><br><span class="line"></span><br><span class="line">#### componentWillReceiveProps()/UNSAFE_componentWillReceiveProps(nextProps) //改变state或者props时触发</span><br><span class="line"></span><br><span class="line">官方建议使用getDerivedStateFromProps函数替代此函数。当组件挂载后，接收到新的props后</span><br><span class="line">会被调用。如果需要更新state来响应props的更改，则可以进行this.props和nextProps的比较，</span><br><span class="line">并在此方法中使用this.setState()</span><br><span class="line"></span><br><span class="line">如果父组件会让这个组件重新渲染，即使props没有改变，也会调用这个方法</span><br><span class="line"></span><br><span class="line">React不会在组件初始化props时调用这个方法。调用this.setState也不会触发</span><br><span class="line"></span><br><span class="line">#### shouldComponentUpdate(nextprops, nextstate) //参数为新的状态和属性，如果返回值为false，状态</span><br><span class="line">改变，视图不更新，数据改变时触发，性能优化的方法之一</span><br><span class="line"></span><br><span class="line">调用shouldComponentUpdate使React知道，组件的输出是否受state和props的影响。默认每个状</span><br><span class="line">态的更改都会重新渲染，大多数情况下应该保持这个默认行为。</span><br><span class="line"></span><br><span class="line">在渲染新的props或state前，shouldComponentUpdate会被调用。默认为true。这个方法不会在</span><br><span class="line">初始化时被调用，也不会在forceUpdate()时被调用。返回false不会阻止子组件在state更改时重新渲染。</span><br><span class="line"></span><br><span class="line">如果shouldComponentUpdate()返回false，componentWillUpdate,render和componentDidUpdate不会被调用</span><br><span class="line"></span><br><span class="line">UNSAFE_componentWillUpdate(nextprops, nextstate) //渲染新的数据时调用</span><br><span class="line"></span><br><span class="line">在渲染新的state或props时，UNSAFE_componentWillUpdate会被调用，将此作为在更新发生之前</span><br><span class="line">进行准备的机会。这个方法不会在初始化时被调用。</span><br><span class="line"></span><br><span class="line">在这里改变数据会导致死循环，这个函数没有太大的实际作用</span><br><span class="line"></span><br><span class="line">不能在这里使用this.setStae()，也不能做会触发视图更新的操作。如果需要更新state或props，</span><br><span class="line">调用getDerivedFromProps.</span><br><span class="line"></span><br><span class="line">#### getsnapshotBeforeUpdate() //新的数据渲染前调用，可以记录scroll滚动条</span><br><span class="line"></span><br><span class="line">在react render()后的输出被渲染到DOM之前被调用。它使您的组件能够在它们被潜在更改之前捕</span><br><span class="line">获当前值（如滚动位置）。这个生命周期返回的任何值都将作为参数传递给componentDidUpdate()</span><br><span class="line"></span><br><span class="line">#### componentDidUpdate( prevprops,prevstate,snapshot )//第三个参数来自getSnapshopBeforeUpdate()函数的返回值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">销毁阶段</span><br><span class="line">componentWillUnmount()// 连dom结构都会清除掉</span><br><span class="line"></span><br><span class="line">在组件被卸载并销毁之前立即被调用。在此方法中执行任何必要的清理，例如使定时器无效，取消网</span><br><span class="line">络请求或清理在componentDidMount中创建的任何监听</span><br><span class="line"></span><br><span class="line">componentDidCatch(err, info)</span><br><span class="line"></span><br><span class="line">出错时页面不会崩溃，但是会在控制台输出错误</span><br><span class="line">错误边界是React组件，可以在其子组件树中的任何位置捕获js错误，记录这些错误并显示回退ui，</span><br><span class="line">而不是崩溃的组件树。错误边界在渲染期间生命周期方法以及整个树下的构造函数中捕获错误。</span><br><span class="line"></span><br><span class="line">如果类组件定义了此生命周期方法，则它将成错误边界。在它中调用setState()可以让你在下面</span><br><span class="line">的树中捕获未处理的JavaScript错误，并显示一个后备UI。只能使用错误边界从意外异常中恢复; </span><br><span class="line">不要试图将它们用于控制流程。</span><br><span class="line"></span><br><span class="line">错误边界只会捕获树中下面组件中的错误。错误边界本身不能捕获错误。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android版本名称、版本号、API level对应关系</title>
      <link href="/2019/01/15/android_01/"/>
      <url>/2019/01/15/android_01/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>-</th><th>Code name</th><th>Version</th><th>API level</th></tr></thead><tbody><tr><td>1</td><td>no code name</td><td>1.0</td><td>API level 1</td></tr><tr><td>2</td><td>no code name</td><td>1.1</td><td>API level 2</td></tr><tr><td>3</td><td>Cupcake</td><td>1.5</td><td>API level 3,NDK 1</td></tr><tr><td>4</td><td>Donut</td><td>1.6</td><td>API level 4,NDK 2</td></tr><tr><td>5</td><td>Eclair</td><td>2.0</td><td>API level 5</td></tr><tr><td>6</td><td>Eclair</td><td>2.0.1</td><td>API level 6</td></tr><tr><td>7</td><td>Eclair</td><td>2.1</td><td>API level 7,NDK3</td></tr><tr><td>8</td><td>Froyo</td><td>2.2.x</td><td>API level 8,NDK 4</td></tr><tr><td>9</td><td>Gingerbread</td><td>2.3-2.3.2</td><td>API level 9,NDK5</td></tr><tr><td>10</td><td>Gingerbread</td><td>2.3.3-2.3.7</td><td>API level 10</td></tr><tr><td>11</td><td>Honeycomb</td><td>3.0</td><td>API level 11</td></tr><tr><td>12</td><td>Honeycomb</td><td>3.1</td><td>API level 12,NDK 6</td></tr><tr><td>13</td><td>Honeycomb</td><td>3.2x</td><td>API level 13</td></tr><tr><td>14</td><td>Ice Cream Sandwich</td><td>4.0.1-4.0.2</td><td>API level 14,NDK 7</td></tr><tr><td>15</td><td>Ice Cream Sandwich</td><td>4.0.3-4.0.4</td><td>API level 15,NDK 8</td></tr><tr><td>16</td><td>Jelly Bean</td><td>4.1x</td><td>API level 16</td></tr><tr><td>17</td><td>Jelly Bean</td><td>4.2x</td><td>API level 17</td></tr><tr><td>18</td><td>Jelly Bean</td><td>4.3x</td><td>API level 18</td></tr><tr><td>19</td><td>Jelly Bean</td><td>4.4-4.4.4</td><td>API level 19</td></tr><tr><td>20</td><td>Lollipop</td><td>5.0</td><td>API level 21</td></tr><tr><td>21</td><td>Lollipop</td><td>5.1</td><td>API level 22</td></tr><tr><td>22</td><td>Marshmallow</td><td>6.0</td><td>API level 23</td></tr><tr><td>23</td><td>Nougat</td><td>7.0</td><td>API level 24</td></tr><tr><td>24</td><td>Nougat</td><td>7.1.1</td><td>API level 25</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端开发自适应解决方案（阿里团队高清方案）</title>
      <link href="/2019/01/15/mobile_01/"/>
      <url>/2019/01/15/mobile_01/</url>
      
        <content type="html"><![CDATA[<p>移动端自适应方案有很多<br><br>1、流式布局<br></p><p>也就是固定高度，宽度是用百分比的方法，这种方法会导致一些元素在大屏手机上拉伸严重的情况，影响视觉效果，只有在很少一部分手机上能完美的展示设计师想要的效果。<br></p><p>2、固定宽度做法<br></p><p>比如早期的淘宝webpage，页面设置成320的宽度，超出部分留白，在大屏幕手机上，就会出现两条大白边，分辨旅高的手机，页面看起来就会特别小，按钮，文字也很小。<br></p><p>3、响应式做法<br></p><p>用一些css框架，比如bootstrap，或者juqeryUI，使用媒体查询，这种方式维护成本高，很少有大型网站使用这种布局。<br></p><p>4、设置viewport进行缩放<br></p><p>天猫的web app的首页就是采用这种方式去做的，以320宽度为基准，进行缩放，最大缩放为320*1.3 = 416，基本缩放到416都可以兼容iphone6 plus的屏幕了，这个方法简单粗暴，又高效。不过有时候使用过程中缩放会导致有些页面元素会糊。<br></p><p>5、rem布局<br>  </p><p>rem是css3新引入的单位，在pc端会有兼容问题，对移动端比较友好。简而言之就是通过动态设置html跟元素的fontsize，等比缩放元素大小来自适应移动设备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">! function(e) &#123;</span><br><span class="line">function t(a) &#123;</span><br><span class="line">if (i[a]) return i[a].exports;</span><br><span class="line">var n = i[a] = &#123;</span><br><span class="line">exports: &#123;&#125;,</span><br><span class="line">id: a,</span><br><span class="line">loaded: !1</span><br><span class="line">&#125;;</span><br><span class="line">return e[a].call(n.exports, n, n.exports, t), n.loaded = !0, n.exports</span><br><span class="line">&#125;</span><br><span class="line">var i = &#123;&#125;;</span><br><span class="line">return t.m = e, t.c = i, t.p = &quot;&quot;, t(0)</span><br><span class="line">&#125;([function(e, t) &#123;</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">Object.defineProperty(t, &quot;__esModule&quot;, &#123;</span><br><span class="line">value: !0</span><br><span class="line">&#125;);</span><br><span class="line">var i = window;</span><br><span class="line">t[&quot;default&quot;] = i.flex = function(e, t) &#123;</span><br><span class="line">var a = e || 100,</span><br><span class="line">n = t || 1,</span><br><span class="line">r = i.document,</span><br><span class="line">o = navigator.userAgent,</span><br><span class="line">d = o.match(/Android[\S\s]+AppleWebkit\/(\d&#123;3&#125;)/i),</span><br><span class="line">l = o.match(/U3\/((\d+|\.)&#123;5,&#125;)/i),</span><br><span class="line">c = l &amp;&amp; parseInt(l[1].split(&quot;.&quot;).join(&quot;&quot;), 10) &gt;= 80,</span><br><span class="line">p = navigator.appVersion.match(/(iphone|ipad|ipod)/gi),</span><br><span class="line">s = i.devicePixelRatio || 1;</span><br><span class="line">p || d &amp;&amp; d[1] &gt; 534 || c || (s = 1);</span><br><span class="line">var u = 1 / s,</span><br><span class="line">m = r.querySelector(&apos;meta[name=&quot;viewport&quot;]&apos;);</span><br><span class="line">m || (m = r.createElement(&quot;meta&quot;), m.setAttribute(&quot;name&quot;, &quot;viewport&quot;), r.head.appendChild(m)), m.setAttribute(&quot;content&quot;, &quot;width=device-width,user-scalable=no,initial-scale=&quot; + u + &quot;,maximum-scale=&quot; + u + &quot;,minimum-scale=&quot; + u), r.documentElement.style.fontSize = a / 2 * s * n + &quot;px&quot;</span><br><span class="line">&#125;, e.exports = t[&quot;default&quot;]</span><br><span class="line">&#125;]);</span><br><span class="line">flex(100, 1);</span><br></pre></td></tr></table></figure><h5 id="代码原理"><a href="#代码原理" class="headerlink" title="代码原理"></a>代码原理</h5><p>1、根据设备屏幕的DPR(设备像素比，比如dpr=2时，表示一个css像素由2x2个物理像素点组成)动态设置html的font-size。<br><br>2、同事根据设备DPR调整页面的缩放值，进而达到高清效果。</p><h5 id="方案优势"><a href="#方案优势" class="headerlink" title="方案优势"></a>方案优势</h5><p>1、引用简单，方便布局(只要把js代码贴到head标签里面，就可以使用了，设计稿一般是640或者750，不需要进行单位换算，直接用设计稿的尺寸就可以，比如设计稿又一个btn的高度为80px，宽度为120px，高清方案默认1rem=100px，那么btn的宽度就设置为:)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.btn &#123;</span><br><span class="line">    width: 0.8rem,</span><br><span class="line">    height: 1.2rem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、根据设备屏幕的DPR，自动设置最合适的高清缩放。保证了不同设备视觉体验的一致性。<br><br>3、有效解决移动端真是1px问题(这里的1px是设备屏幕上的物理像素)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">并不是所有用px的地方都要用rem，rem布局只针对固定宽度。</span><br><span class="line">依需求而定，比如淘宝页面底下的tabar，和头部的搜索区域，都是用百分比来布局的，或者flex和模型，当在ipad上打开的时候就可以看见，头部和tab是撑满全屏的。</span><br><span class="line">中间的主要内容（最外部的容器）要设置一个max-width，demo设置的是max-width：10rem，这里我不太明白为什么要设置成10rem，有弄明白的小伙伴希望能告诉我。谢谢（已解决，和设置最外层宽度为100%是一样的道理，10rem 可以适配到所有手机设备。1000%可以适配ipad，demo试试就知道了）</span><br><span class="line">（应用了此方案，不管设计图多宽（当然，一般宽度为750，640也可以），最外层的div宽度设为100%就行，然后就可以愉快的布局了，不会出现你说的白边的情况。）</span><br><span class="line"></span><br><span class="line">对于尺寸比较大的元素，应该考虑用百分比。rem做单位的元素在哪种设备下都是固定大小，这点必须牢记！！</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">可能遇到的问题：</span><br><span class="line">1.问：为啥手机网页效果图宽度是要640或者750的，我非得弄个666的不行咩？</span><br><span class="line"></span><br><span class="line">答：老实说当然可以，不过为了规范，640或者750是相对合适的。拿Iphone 5s 举例，它的css像素宽度是320px，由于它的dpr=2，所以它的物理像素宽度为320 × 2 = 640px，这也就是为什么，你在5s上截了一张图，在电脑上打开，它的原始宽度是640px的原因。那 iphone 6 的截图宽度呢？ 375 × 2 = 750那 iphone 6 sp 的截图宽度呢？ 414 × 3 = 1242以此类推，你现在能明白效果图为什么一般是 640 ，750 甚至是 1242 的原因了么？（真没有歧视安卓机的意思。。。）</span><br><span class="line"></span><br><span class="line">2.问：宽度用rem写的情况下， 在 iphone6 上没问题， 在 iphone5上会有横向滚动条，何解？</span><br><span class="line"></span><br><span class="line">答：假设你的效果图宽度是750，在这个效果图上可能有一个宽度为7rem（高清方案默认 1rem = 100px）的元素。我们知道，高清方案的特点就是几乎完美还原效果图，也就是说，你写了一个宽度为 7rem 的元素，那么在目前主流移动设备上都是7rem。然而，iphone 5 的宽度为640，也就是6.4rem。于是横向滚动条不可避免的出现了。怎么办呢？ 这是我目前推荐的比较安全的方式：如果元素的宽度超过效果图宽度的一半（效果图宽为640或750），果断使用百分比宽度，或者flex布局。就像把等屏宽的图片宽度设为100%一样。</span><br><span class="line"></span><br><span class="line">3.问：不是 1rem = 100px吗，为什么我的代码写了一个宽度为3rem的元素，在电脑端的谷歌浏览器上宽度只有150px?</span><br><span class="line"></span><br><span class="line">答：先说高清方案代码，再次强调咱们的高清方案代码是根据设备的dpr动态设置html 的 font-size，如果dpr=1(如电脑端），则html的font-size为50px，此时 1rem = 50px如果dpr=2(如iphone 5 和 6），则html的font-size为100px，此时 1rem = 100px如果dpr=3(如iphone 6 sp），则html的font-size为150px，此时 1rem = 150px如果dpr为其他值，即便不是整数，如3.4 , 也是一样直接将dpr 乘以 50 。</span><br><span class="line">再来说说效果图，一般来讲，我们的效果图宽度要么是640，要么是750，无论哪一个，它们对应设备的dpr=2，此时，1 rem = 50 × 2 = 100px。这也就是为什么高清方案默认1rem = 100px。而将1rem默认100px也是好处多多，可以帮你快速换算单位，比如在750宽度下的效果图，某元素宽度为53px，那么css宽度直接设为53/100=0.53rem了。</span><br><span class="line">然而极少情况下，有设计师将效果图宽定为1242px，因为他手里只有一个iphone 6 sp (dpr = 3)，设计完效果图刚好可以在他的iphone 6 sp里查看调整。一切完毕之后，他将这个效果图交给你来切图。由于这个效果图对应设备的dpr=3，也就是1rem = 50 × 3 = 150px。所以如果你量取了一个宽度为90px的元素，它的css宽度应该为 90/150=0.6rem。由于咱们的高清方案默认1rem=100px，为了还原效果图，你需要这样换算。当然，一个技巧就是你可以直接修改咱们的高清方案的默认设置。在代码的最后 你会看到 flex(100, 1) ，将其修改成flex(66.66667, 1)（感谢简友：V旅行指出此处错误！ 2017/3/24）就不用那么麻烦的换算了，此时那个90px的直接写成0.9rem就可以了。</span><br><span class="line"></span><br><span class="line">4.问：高清方案在微信上，有时候字体会不受控制变的很大，怎么办？</span><br><span class="line"></span><br><span class="line">答：点我，这是我对该问题的总结</span><br><span class="line">5.问：我在底部导航用的flex感觉更合适一些，请问这样子混着用可以吗？</span><br><span class="line"></span><br><span class="line">答：咱们的rem适合写固定尺寸。其余的根据需要换成flex或者百分比。源码示例中就有这三种的综合运用。</span><br><span class="line">6.问：在高清方案下，一个标准的，较为理想的宽度为640的页面效果图应该是怎样的？</span><br><span class="line"></span><br><span class="line">7.这个会和bootstrap冲突。</span><br><span class="line">解决办法：</span><br><span class="line">1，将bootstrap 中，凡是用到px的单位一律换成rem</span><br><span class="line">2，如果你有使用webpack，建议使用将css转成rem的包（postcss-pxtorem）将自动完成第一步的操作。</span><br><span class="line"></span><br><span class="line">8.@2x和@3x的图片还要判断不同的dpr下用不同的图片。</span><br><span class="line"></span><br><span class="line">Normalize.css 是一个可以定制的CSS文件，它让不同的浏览器在渲染网页元素的时候形式更统一。</span><br><span class="line"></span><br><span class="line">Normalize.css 能干什么：</span><br><span class="line"></span><br><span class="line">保留有用的默认值，不同于许多 CSS 的重置</span><br><span class="line"></span><br><span class="line">标准化的样式，适用范围广的元素。</span><br><span class="line"></span><br><span class="line">纠正错误和常见的浏览器的不一致性。</span><br><span class="line"></span><br><span class="line">一些细微的改进，提高了易用性。</span><br><span class="line"></span><br><span class="line">使用详细的注释来解释代码。</span><br><span class="line"></span><br><span class="line">支持的浏览器：</span><br><span class="line"></span><br><span class="line">Google Chrome (latest)</span><br><span class="line"></span><br><span class="line">Mozilla Firefox (latest)</span><br><span class="line"></span><br><span class="line">Mozilla Firefox ESR</span><br><span class="line"></span><br><span class="line">Opera (latest)</span><br><span class="line"></span><br><span class="line">Apple Safari 6+</span><br><span class="line"></span><br><span class="line">Internet Explorer 8+</span><br></pre></td></tr></table></figure><p>引用于<a href="https://www.jianshu.com/p/07669cb3e7c5" target="_blank" rel="noopener">https://www.jianshu.com/p/07669cb3e7c5</a></p>]]></content>
      
      
      <categories>
          
          <category> 移动端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决bootstrap模态框切换时页面抖动or页面滚动条</title>
      <link href="/2019/01/15/bootstrap/"/>
      <url>/2019/01/15/bootstrap/</url>
      
        <content type="html"><![CDATA[<p>Bootstrap为了让所有的页面(这里指内容溢出和不溢出)显示效果一样，采取的方法如下:<br></p><p>当Modal显示时，设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    margin-right: 15px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(设置15px是因为浏览器的滚动条占位时15px)<br></p><p>在modal显示时给body添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.modal-open &#123;</span><br><span class="line">    overflow: auto;</span><br><span class="line">    overflow-y: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样设置的效果是：<br></p><p>1、当页面内容超出(即页面本身存在滚动条)，则modal弹出后，原body滚动禁止，body的margin-right和modal的滚动条位置重叠，此时页面是不会出现抖动现象的。<br><br>2、当页面内容未超出(即页面本身不存在滚动条)，则modal弹出后，由于body设置了margin-right，会使得页面向左偏移，当modal关闭后，body的margin-right为0，页面向右偏移，就出现页面抖动。<br></p><p>根据上面的描述，解决页面抖动的思路是：<br></p><p>根据scrollHeight和clientHeight，分别在modal加载前和关闭时调整body的overflow、margin-right和.modal的overflow属性，以覆盖bootstrap.css中的样式<br></p><p>函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//解决Modal弹出时页面左右移动问题</span><br><span class="line"></span><br><span class="line">最佳的办法应该是CSS：</span><br><span class="line">引用@僵叔叔的答案：body&#123; overflow: auto !important;&#125; .modal&#123; overflow: auto !important;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Bootstrap </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
