<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React Native解决&#39;libgnustl_shared.so is 32-bit instead if 64-bit&#39;报错</title>
      <link href="/2019/01/15/rn_02/"/>
      <url>/2019/01/15/rn_02/</url>
      
        <content type="html"><![CDATA[<p>React Native项目在64位Android手机上运行，会提示<br>“/data/data/com.xxx.xxx/lib-main/libgnustl_shared.so”is 32-bit instead of 64-bit这个错误。</p><p>解决方法就是取消掉所有64位的.so文件，全部加载32位的就可以了，下面是步骤</p><ol><li>在项目的根部录的gradle.properties里面添加一行代码，android.useDeprecatedNdk = true.</li><li>在build.gradle文件里添加以下代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line">defaultConfig &#123;</span><br><span class="line">...</span><br><span class="line">ndk &#123;</span><br><span class="line">abiFilters: &quot;armeabi-v7a&quot;,&quot;x86&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">packagingOptions &#123;</span><br><span class="line">exclude &quot;lib/arm64-v8a/librealm-jni.so&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决bootstrap模态框切换时页面抖动or页面滚动条</title>
      <link href="/2019/01/15/bootstrap/"/>
      <url>/2019/01/15/bootstrap/</url>
      
        <content type="html"><![CDATA[<p>Bootstrap为了让所有的页面(这里指内容溢出和不溢出)显示效果一样，采取的方法如下:<br></p><p>当Modal显示时，设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    margin-right: 15px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(设置15px是因为浏览器的滚动条占位时15px)<br></p><p>在modal显示时给body添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.modal-open &#123;</span><br><span class="line">    overflow: auto;</span><br><span class="line">    overflow-y: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样设置的效果是：<br></p><p>1、当页面内容超出(即页面本身存在滚动条)，则modal弹出后，原body滚动禁止，body的margin-right和modal的滚动条位置重叠，此时页面是不会出现抖动现象的。<br><br>2、当页面内容未超出(即页面本身不存在滚动条)，则modal弹出后，由于body设置了margin-right，会使得页面向左偏移，当modal关闭后，body的margin-right为0，页面向右偏移，就出现页面抖动。<br></p><p>根据上面的描述，解决页面抖动的思路是：<br></p><p>根据scrollHeight和clientHeight，分别在modal加载前和关闭时调整body的overflow、margin-right和.modal的overflow属性，以覆盖bootstrap.css中的样式<br></p><p>函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//解决Modal弹出时页面左右移动问题</span><br><span class="line"></span><br><span class="line">最佳的办法应该是CSS：</span><br><span class="line">引用@僵叔叔的答案：body&#123; overflow: auto !important;&#125; .modal&#123; overflow: auto !important;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Bootstrap </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css3隔行变色</title>
      <link href="/2019/01/15/css_01/"/>
      <url>/2019/01/15/css_01/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">div:nth-of-type(odd)&#123;background:#fff&#125;  /*奇数行*/</span><br><span class="line"></span><br><span class="line">div:nth-of-type(even)&#123;background:#000&#125;   /*偶数行 */</span><br><span class="line"></span><br><span class="line">div:nth-child(4n+1)&#123;background:#fff&#125;  /*从第一行开始算起 每隔四个（包含第四个）使用此样式*/</span><br><span class="line"></span><br><span class="line">div:nth-child(4n+2)&#123;background:#fff&#125;  /*从第二行开始算起 每隔四个（包含第四个）使用此样式*/</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:nth-child(n)&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">找出E元素,且它是你北朝鲜绵第n个子元素.n可以是数字(1,2,3),关键字(odd,even),公式(2n,2n+3),数字是从1开始的,不是0.如:</span><br><span class="line"></span><br><span class="line">tr:nth-child(3)匹配所有表格里第3行的tr</span><br><span class="line"></span><br><span class="line">tr:nth-child(2n+1)匹配所有表格的奇数行</span><br><span class="line"></span><br><span class="line">tr:nth-child(2n)匹配所有的偶数行</span><br><span class="line"></span><br><span class="line">tr:nth-child(odd)匹配所有的奇数行</span><br><span class="line"></span><br><span class="line">tr:nth-child(even)匹配所有的偶数行</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:nth-last-child(n)&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">选择E元素,且它是父元素的倒数第n个子元素</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:nth-of-type(n)&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">选择E元素,且它是父元素所有子元素中类型为E的子元素集合中的第n个,n可以是数字(1,2,3),关键字(odd,even),公式(2n,2n+3),数字是从1开始的,不是0.如p:nth-of-type(2)匹配出,&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;中第二个p元素</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:nth-last-of-type(n)&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">选择E元素,且它是父元素的倒数第n个子节点</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:last-child&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">找出E元素,且它是父元素中的最后一个字节点</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:first-of-tpe&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">找出E元素,且它是父元素中是第一个该类型的元素,如p:first-of-type匹配&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;中的第一个p元素.</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:last-of-type&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">找出E元素,且它是父元素中的最后一个该类型的元素.如:p:last-of-type匹配,&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;中的最后一个p元素,它同E:nth-last-of-tpe(1)意义相同</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:only-child&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">找出父元素中只包括一个的子元素,且该元素是E</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:only-of-type&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">选择其父元素只包含一个同类型的子元素,且该子元素匹配E.如p:only-of-type匹配&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;中的p,因为div中只包括一个p元素</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;E:empty&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">匹配E元素,且该元素不包含子节点,注意,文字也属于节点</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React下拉刷新</title>
      <link href="/2019/01/15/react_01/"/>
      <url>/2019/01/15/react_01/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import HttpUtil  from  &apos;../common/common&apos;</span><br><span class="line">import PullRefresh from &apos;reactjs-pull-refresh&apos;</span><br><span class="line"></span><br><span class="line">export default class NewList extends Component&#123;</span><br><span class="line">constructor(props)&#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state=&#123;</span><br><span class="line">hasMore: true,  //是否加载更多</span><br><span class="line">stores: [],     //数据</span><br><span class="line">page:0,         //当前请求的页数</span><br><span class="line">size:10,        //每次请求的数量</span><br><span class="line">total: 110      //数据总条数</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">this.getData(this.state.page, this.state.size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">refreshCallback() &#123;</span><br><span class="line">let &#123; stores, total, size &#125; = this.state;</span><br><span class="line">return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">let result = false;</span><br><span class="line">if (Math.random() &gt; 0.1) &#123;</span><br><span class="line">result = true;</span><br><span class="line">&#125;</span><br><span class="line">if (result) &#123;</span><br><span class="line">this.setState(&#123;</span><br><span class="line">page: 0,</span><br><span class="line">hasMore: stores.length &lt;= total</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">this.getData(this.state.page, size);</span><br><span class="line">resolve();</span><br><span class="line">&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">reject(new Error(&apos;错误&apos;));</span><br><span class="line">&#125;</span><br><span class="line">&#125;, 1000);</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">console.info(&apos;刷新成功！&apos;);</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">console.info(&apos;刷新失败！&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">loadMoreCallback = () =&gt; &#123;</span><br><span class="line">let &#123; stores, total, size &#125; = this.state;</span><br><span class="line">return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">let result = false;</span><br><span class="line">if (Math.random() &gt; 0.1) &#123;</span><br><span class="line">result = true;</span><br><span class="line">&#125;</span><br><span class="line">if (result) &#123;</span><br><span class="line">this.setState(&#123;</span><br><span class="line">page: this.state.page + 1,</span><br><span class="line">hasMore: stores.length &lt;= total</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">this.getData(this.state.page, size);</span><br><span class="line">resolve();</span><br><span class="line">&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">reject(new Error(&apos;错误&apos;));</span><br><span class="line">&#125;</span><br><span class="line">&#125;, 1000);</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">console.info(&apos;加载更多成功！&apos;);</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">console.info(&apos;加载更多失败！&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getData(page,size) &#123;</span><br><span class="line">var self = this;</span><br><span class="line">let params = &#123;</span><br><span class="line">page: this.state.page,</span><br><span class="line">size: this.state.size</span><br><span class="line">&#125;;</span><br><span class="line">let stores = [];</span><br><span class="line"></span><br><span class="line">HttpUtil.fetchPost(</span><br><span class="line">url,</span><br><span class="line">params,</span><br><span class="line">(jsonData) =&gt; &#123;</span><br><span class="line">   if(jsonData.code === 0)&#123;</span><br><span class="line">   if(page === 0)&#123;</span><br><span class="line">   self.setState(&#123;</span><br><span class="line">   stores: jsonData.res.data.record,</span><br><span class="line">   total: jsonData.res.data.total  //这个必须要，这个是数据的总条数</span><br><span class="line">   &#125;)</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">   self.setState(&#123;</span><br><span class="line">   stores: self.state.stores.concat(jsonData.res.data.record),</span><br><span class="line">   total: jsonData.res.data.total  //这个必须要，这个是数据的总条数</span><br><span class="line">   &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br><span class="line">(err) =&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">const &#123; hasMore, stores &#125; = this.state;</span><br><span class="line"></span><br><span class="line">const props = &#123;</span><br><span class="line">maxAmplitude: 80,</span><br><span class="line">debounceTime: 30,</span><br><span class="line">throttleTime: 100,</span><br><span class="line">deceleration: 0.001,</span><br><span class="line">refreshCallback: this.refreshCallback.bind(this),</span><br><span class="line">loadMoreCallback: this.loadMoreCallback.bind(this),</span><br><span class="line">hasMore</span><br><span class="line">&#125;;</span><br><span class="line">return (</span><br><span class="line">&lt;div className=&quot;list&quot;&gt;</span><br><span class="line">&lt;PullRefresh&#123;...props&#125;&gt;</span><br><span class="line">&#123;</span><br><span class="line">stores.map((data,i) =&gt; &#123;</span><br><span class="line">return    &lt;div className=&quot;duc_list&quot; key=&#123;i&#125; &gt;</span><br><span class="line">   &lt;h3 className=&quot;list_name&quot; &gt;&#123;data.villageName&#125;&lt;/h3&gt;</span><br><span class="line">&lt;div className=&quot;list_info&quot;&gt;</span><br><span class="line">&lt;img className=&quot;list_img&quot; src=&quot;http://121.40.178.164:4040/react-res/public/uploads/banner/8a2f424c58fd4e9e0158fd6aa04a002c/11.jpg&quot; alt=&quot;&quot;/&gt;</span><br><span class="line">&lt;div className=&quot;list_rent&quot;&gt;¥&lt;span&gt;&#123;data.salePrice&#125;&lt;/span&gt;/月&lt;/div&gt;</span><br><span class="line">&lt;div className=&quot;list_rom&quot;&gt;</span><br><span class="line">&lt;span className=&quot;list_rom_area&quot;&gt;&lt;span&gt;&#123;data.room&#125;&lt;/span&gt;室 &lt;span&gt;&#123;data.hall&#125;&lt;/span&gt;厅 &lt;span&gt;&#123;data.useArea&#125;&lt;/span&gt;㎡&lt;/span&gt;</span><br><span class="line">&lt;span className=&quot;list_avage&quot;&gt;&#123;data.advantage&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div className=&quot;list_address&quot;&gt;</span><br><span class="line">&lt;img</span><br><span class="line">src=&#123;require(&apos;../images/sub-icon.png&apos;)&#125;</span><br><span class="line"></span><br><span class="line">/&gt;</span><br><span class="line">&lt;span className=&quot;list_address_info&quot;&gt;&#123;data.address&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;div className=&quot;line&quot;&gt;&lt;/div&gt;</span><br><span class="line">   &lt;/PullRefresh&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac显示隐藏文件</title>
      <link href="/2019/01/15/mac_01/"/>
      <url>/2019/01/15/mac_01/</url>
      
        <content type="html"><![CDATA[<h5 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h5><p>在macOS Sierra, 我们可以使用快捷键⌘⇧.(Command + Shift + .)来快速(在Finder中)显示和隐藏文件</p><h5 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h5><p>在终端使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//显示隐藏文件</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool true</span><br><span class="line">//不显示隐藏文件</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android版本名称、版本号、API level对应关系</title>
      <link href="/2019/01/15/android_01/"/>
      <url>/2019/01/15/android_01/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>-</th><th>Code name</th><th>Version</th><th>API level</th></tr></thead><tbody><tr><td>1</td><td>no code name</td><td>1.0</td><td>API level 1</td></tr><tr><td>2</td><td>no code name</td><td>1.1</td><td>API level 2</td></tr><tr><td>3</td><td>Cupcake</td><td>1.5</td><td>API level 3,NDK 1</td></tr><tr><td>4</td><td>Donut</td><td>1.6</td><td>API level 4,NDK 2</td></tr><tr><td>5</td><td>Eclair</td><td>2.0</td><td>API level 5</td></tr><tr><td>6</td><td>Eclair</td><td>2.0.1</td><td>API level 6</td></tr><tr><td>7</td><td>Eclair</td><td>2.1</td><td>API level 7,NDK3</td></tr><tr><td>8</td><td>Froyo</td><td>2.2.x</td><td>API level 8,NDK 4</td></tr><tr><td>9</td><td>Gingerbread</td><td>2.3-2.3.2</td><td>API level 9,NDK5</td></tr><tr><td>10</td><td>Gingerbread</td><td>2.3.3-2.3.7</td><td>API level 10</td></tr><tr><td>11</td><td>Honeycomb</td><td>3.0</td><td>API level 11</td></tr><tr><td>12</td><td>Honeycomb</td><td>3.1</td><td>API level 12,NDK 6</td></tr><tr><td>13</td><td>Honeycomb</td><td>3.2x</td><td>API level 13</td></tr><tr><td>14</td><td>Ice Cream Sandwich</td><td>4.0.1-4.0.2</td><td>API level 14,NDK 7</td></tr><tr><td>15</td><td>Ice Cream Sandwich</td><td>4.0.3-4.0.4</td><td>API level 15,NDK 8</td></tr><tr><td>16</td><td>Jelly Bean</td><td>4.1x</td><td>API level 16</td></tr><tr><td>17</td><td>Jelly Bean</td><td>4.2x</td><td>API level 17</td></tr><tr><td>18</td><td>Jelly Bean</td><td>4.3x</td><td>API level 18</td></tr><tr><td>19</td><td>Jelly Bean</td><td>4.4-4.4.4</td><td>API level 19</td></tr><tr><td>20</td><td>Lollipop</td><td>5.0</td><td>API level 21</td></tr><tr><td>21</td><td>Lollipop</td><td>5.1</td><td>API level 22</td></tr><tr><td>22</td><td>Marshmallow</td><td>6.0</td><td>API level 23</td></tr><tr><td>23</td><td>Nougat</td><td>7.0</td><td>API level 24</td></tr><tr><td>24</td><td>Nougat</td><td>7.1.1</td><td>API level 25</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React下拉刷新</title>
      <link href="/2019/01/15/react_02/"/>
      <url>/2019/01/15/react_02/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import HttpUtil  from  &apos;../common/common&apos;</span><br><span class="line">import PullRefresh from &apos;reactjs-pull-refresh&apos;</span><br><span class="line"></span><br><span class="line">export default class NewList extends Component&#123;</span><br><span class="line">constructor(props)&#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state=&#123;</span><br><span class="line">hasMore: true,  //是否加载更多</span><br><span class="line">stores: [],     //数据</span><br><span class="line">page:0,         //当前请求的页数</span><br><span class="line">size:10,        //每次请求的数量</span><br><span class="line">total: 110      //数据总条数</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">this.getData(this.state.page, this.state.size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">refreshCallback() &#123;</span><br><span class="line">let &#123; stores, total, size &#125; = this.state;</span><br><span class="line">return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">let result = false;</span><br><span class="line">if (Math.random() &gt; 0.1) &#123;</span><br><span class="line">result = true;</span><br><span class="line">&#125;</span><br><span class="line">if (result) &#123;</span><br><span class="line">this.setState(&#123;</span><br><span class="line">page: 0,</span><br><span class="line">hasMore: stores.length &lt;= total</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">this.getData(this.state.page, size);</span><br><span class="line">resolve();</span><br><span class="line">&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">reject(new Error(&apos;错误&apos;));</span><br><span class="line">&#125;</span><br><span class="line">&#125;, 1000);</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">console.info(&apos;刷新成功！&apos;);</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">console.info(&apos;刷新失败！&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">loadMoreCallback = () =&gt; &#123;</span><br><span class="line">let &#123; stores, total, size &#125; = this.state;</span><br><span class="line">return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">let result = false;</span><br><span class="line">if (Math.random() &gt; 0.1) &#123;</span><br><span class="line">result = true;</span><br><span class="line">&#125;</span><br><span class="line">if (result) &#123;</span><br><span class="line">this.setState(&#123;</span><br><span class="line">page: this.state.page + 1,</span><br><span class="line">hasMore: stores.length &lt;= total</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">this.getData(this.state.page, size);</span><br><span class="line">resolve();</span><br><span class="line">&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">reject(new Error(&apos;错误&apos;));</span><br><span class="line">&#125;</span><br><span class="line">&#125;, 1000);</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">console.info(&apos;加载更多成功！&apos;);</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">console.info(&apos;加载更多失败！&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getData(page,size) &#123;</span><br><span class="line">var self = this;</span><br><span class="line">let params = &#123;</span><br><span class="line">page: this.state.page,</span><br><span class="line">size: this.state.size</span><br><span class="line">&#125;;</span><br><span class="line">let stores = [];</span><br><span class="line"></span><br><span class="line">HttpUtil.fetchPost(</span><br><span class="line">url,</span><br><span class="line">params,</span><br><span class="line">(jsonData) =&gt; &#123;</span><br><span class="line">   if(jsonData.code === 0)&#123;</span><br><span class="line">   if(page === 0)&#123;</span><br><span class="line">   self.setState(&#123;</span><br><span class="line">   stores: jsonData.res.data.record,</span><br><span class="line">   total: jsonData.res.data.total  //这个必须要，这个是数据的总条数</span><br><span class="line">   &#125;)</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">   self.setState(&#123;</span><br><span class="line">   stores: self.state.stores.concat(jsonData.res.data.record),</span><br><span class="line">   total: jsonData.res.data.total  //这个必须要，这个是数据的总条数</span><br><span class="line">   &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br><span class="line">(err) =&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">const &#123; hasMore, stores &#125; = this.state;</span><br><span class="line"></span><br><span class="line">const props = &#123;</span><br><span class="line">maxAmplitude: 80,</span><br><span class="line">debounceTime: 30,</span><br><span class="line">throttleTime: 100,</span><br><span class="line">deceleration: 0.001,</span><br><span class="line">refreshCallback: this.refreshCallback.bind(this),</span><br><span class="line">loadMoreCallback: this.loadMoreCallback.bind(this),</span><br><span class="line">hasMore</span><br><span class="line">&#125;;</span><br><span class="line">return (</span><br><span class="line">&lt;div className=&quot;list&quot;&gt;</span><br><span class="line">&lt;PullRefresh&#123;...props&#125;&gt;</span><br><span class="line">&#123;</span><br><span class="line">stores.map((data,i) =&gt; &#123;</span><br><span class="line">return    &lt;div className=&quot;duc_list&quot; key=&#123;i&#125; &gt;</span><br><span class="line">   &lt;h3 className=&quot;list_name&quot; &gt;&#123;data.villageName&#125;&lt;/h3&gt;</span><br><span class="line">&lt;div className=&quot;list_info&quot;&gt;</span><br><span class="line">&lt;img className=&quot;list_img&quot; src=&quot;http://121.40.178.164:4040/react-res/public/uploads/banner/8a2f424c58fd4e9e0158fd6aa04a002c/11.jpg&quot; alt=&quot;&quot;/&gt;</span><br><span class="line">&lt;div className=&quot;list_rent&quot;&gt;¥&lt;span&gt;&#123;data.salePrice&#125;&lt;/span&gt;/月&lt;/div&gt;</span><br><span class="line">&lt;div className=&quot;list_rom&quot;&gt;</span><br><span class="line">&lt;span className=&quot;list_rom_area&quot;&gt;&lt;span&gt;&#123;data.room&#125;&lt;/span&gt;室 &lt;span&gt;&#123;data.hall&#125;&lt;/span&gt;厅 &lt;span&gt;&#123;data.useArea&#125;&lt;/span&gt;㎡&lt;/span&gt;</span><br><span class="line">&lt;span className=&quot;list_avage&quot;&gt;&#123;data.advantage&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div className=&quot;list_address&quot;&gt;</span><br><span class="line">&lt;img</span><br><span class="line">src=&#123;require(&apos;../images/sub-icon.png&apos;)&#125;</span><br><span class="line"></span><br><span class="line">/&gt;</span><br><span class="line">&lt;span className=&quot;list_address_info&quot;&gt;&#123;data.address&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;div className=&quot;line&quot;&gt;&lt;/div&gt;</span><br><span class="line">   &lt;/PullRefresh&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React Naitve 性能优化</title>
      <link href="/2019/01/15/rn_01/"/>
      <url>/2019/01/15/rn_01/</url>
      
        <content type="html"><![CDATA[<h5 id="1、利用shouldComponentUpdate函数优化react性能以及引入immutable库的必要性-也适用于react-native"><a href="#1、利用shouldComponentUpdate函数优化react性能以及引入immutable库的必要性-也适用于react-native" class="headerlink" title="1、利用shouldComponentUpdate函数优化react性能以及引入immutable库的必要性(也适用于react-native)"></a>1、利用shouldComponentUpdate函数优化react性能以及引入immutable库的必要性(也适用于react-native)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setState()函数在任何情况下都会导致组件重渲染吗？如果setState()中参数还是原来没有发生任何变化的staten？</span><br><span class="line">如果组件的state没有变化，并且从父组件接收的props也没有变化，那它就一定不会重渲染吗？</span><br><span class="line">如果1，2两种情况下都会导致重渲染，我们该如何避免这种冗杂的操作，从而优化性能？</span><br></pre></td></tr></table></figure><p>参考 <a href="https://www.cnblogs.com/penghuwan/p/6707254.html" target="_blank" rel="noopener">https://www.cnblogs.com/penghuwan/p/6707254.html</a></p>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React Naitve 错误集锦</title>
      <link href="/2019/01/15/rn_03/"/>
      <url>/2019/01/15/rn_03/</url>
      
        <content type="html"><![CDATA[<p>1、在android华为手机上运行React-native工程时出现了如下错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">报错：unable to load script from assets &apos;index.android.bundle&apos;, make sure your bundle is packaged correctly or youu’re running a packager server</span><br></pre></td></tr></table></figure><p>解决办法：<br><br>    1、在Android/app/src/main目录下创建一个空的assets文件夹<br><br>    2、进入项目跟目录执行下面代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native bundle --platform android --dev false --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行完毕后assets文件夹下会多出index.android.bundle和index.android.bundle.meta两个文件</span><br></pre></td></tr></table></figure><p>重新运行<br></p><p>总结:<br><br>index.android.bundle是用来调用原生控件的js脚本，每次当改变index.android.js,都需要使用上面的代码片段，来及时的更新index.android.bundle文件，然后打包才可以把新的index.android.js应用上，所以没有index.android.bundle文件时，React-Native项目时无法运行的。</p>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端开发自适应解决方案（阿里团队高清方案）</title>
      <link href="/2019/01/15/mobile_01/"/>
      <url>/2019/01/15/mobile_01/</url>
      
        <content type="html"><![CDATA[<p>移动端自适应方案有很多<br><br>1、流式布局<br></p><p>也就是固定高度，宽度是用百分比的方法，这种方法会导致一些元素在大屏手机上拉伸严重的情况，影响视觉效果，只有在很少一部分手机上能完美的展示设计师想要的效果。<br></p><p>2、固定宽度做法<br></p><p>比如早期的淘宝webpage，页面设置成320的宽度，超出部分留白，在大屏幕手机上，就会出现两条大白边，分辨旅高的手机，页面看起来就会特别小，按钮，文字也很小。<br></p><p>3、响应式做法<br></p><p>用一些css框架，比如bootstrap，或者juqeryUI，使用媒体查询，这种方式维护成本高，很少有大型网站使用这种布局。<br></p><p>4、设置viewport进行缩放<br></p><p>天猫的web app的首页就是采用这种方式去做的，以320宽度为基准，进行缩放，最大缩放为320*1.3 = 416，基本缩放到416都可以兼容iphone6 plus的屏幕了，这个方法简单粗暴，又高效。不过有时候使用过程中缩放会导致有些页面元素会糊。<br></p><p>5、rem布局<br>  </p><p>rem是css3新引入的单位，在pc端会有兼容问题，对移动端比较友好。简而言之就是通过动态设置html跟元素的fontsize，等比缩放元素大小来自适应移动设备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">! function(e) &#123;</span><br><span class="line">function t(a) &#123;</span><br><span class="line">if (i[a]) return i[a].exports;</span><br><span class="line">var n = i[a] = &#123;</span><br><span class="line">exports: &#123;&#125;,</span><br><span class="line">id: a,</span><br><span class="line">loaded: !1</span><br><span class="line">&#125;;</span><br><span class="line">return e[a].call(n.exports, n, n.exports, t), n.loaded = !0, n.exports</span><br><span class="line">&#125;</span><br><span class="line">var i = &#123;&#125;;</span><br><span class="line">return t.m = e, t.c = i, t.p = &quot;&quot;, t(0)</span><br><span class="line">&#125;([function(e, t) &#123;</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">Object.defineProperty(t, &quot;__esModule&quot;, &#123;</span><br><span class="line">value: !0</span><br><span class="line">&#125;);</span><br><span class="line">var i = window;</span><br><span class="line">t[&quot;default&quot;] = i.flex = function(e, t) &#123;</span><br><span class="line">var a = e || 100,</span><br><span class="line">n = t || 1,</span><br><span class="line">r = i.document,</span><br><span class="line">o = navigator.userAgent,</span><br><span class="line">d = o.match(/Android[\S\s]+AppleWebkit\/(\d&#123;3&#125;)/i),</span><br><span class="line">l = o.match(/U3\/((\d+|\.)&#123;5,&#125;)/i),</span><br><span class="line">c = l &amp;&amp; parseInt(l[1].split(&quot;.&quot;).join(&quot;&quot;), 10) &gt;= 80,</span><br><span class="line">p = navigator.appVersion.match(/(iphone|ipad|ipod)/gi),</span><br><span class="line">s = i.devicePixelRatio || 1;</span><br><span class="line">p || d &amp;&amp; d[1] &gt; 534 || c || (s = 1);</span><br><span class="line">var u = 1 / s,</span><br><span class="line">m = r.querySelector(&apos;meta[name=&quot;viewport&quot;]&apos;);</span><br><span class="line">m || (m = r.createElement(&quot;meta&quot;), m.setAttribute(&quot;name&quot;, &quot;viewport&quot;), r.head.appendChild(m)), m.setAttribute(&quot;content&quot;, &quot;width=device-width,user-scalable=no,initial-scale=&quot; + u + &quot;,maximum-scale=&quot; + u + &quot;,minimum-scale=&quot; + u), r.documentElement.style.fontSize = a / 2 * s * n + &quot;px&quot;</span><br><span class="line">&#125;, e.exports = t[&quot;default&quot;]</span><br><span class="line">&#125;]);</span><br><span class="line">flex(100, 1);</span><br></pre></td></tr></table></figure><h5 id="代码原理"><a href="#代码原理" class="headerlink" title="代码原理"></a>代码原理</h5><p>1、根据设备屏幕的DPR(设备像素比，比如dpr=2时，表示一个css像素由2x2个物理像素点组成)动态设置html的font-size。<br><br>2、同事根据设备DPR调整页面的缩放值，进而达到高清效果。</p><h5 id="方案优势"><a href="#方案优势" class="headerlink" title="方案优势"></a>方案优势</h5><p>1、引用简单，方便布局(只要把js代码贴到head标签里面，就可以使用了，设计稿一般是640或者750，不需要进行单位换算，直接用设计稿的尺寸就可以，比如设计稿又一个btn的高度为80px，宽度为120px，高清方案默认1rem=100px，那么btn的宽度就设置为:)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.btn &#123;</span><br><span class="line">    width: 0.8rem,</span><br><span class="line">    height: 1.2rem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、根据设备屏幕的DPR，自动设置最合适的高清缩放。保证了不同设备视觉体验的一致性。<br><br>3、有效解决移动端真是1px问题(这里的1px是设备屏幕上的物理像素)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">并不是所有用px的地方都要用rem，rem布局只针对固定宽度。</span><br><span class="line">依需求而定，比如淘宝页面底下的tabar，和头部的搜索区域，都是用百分比来布局的，或者flex和模型，当在ipad上打开的时候就可以看见，头部和tab是撑满全屏的。</span><br><span class="line">中间的主要内容（最外部的容器）要设置一个max-width，demo设置的是max-width：10rem，这里我不太明白为什么要设置成10rem，有弄明白的小伙伴希望能告诉我。谢谢（已解决，和设置最外层宽度为100%是一样的道理，10rem 可以适配到所有手机设备。1000%可以适配ipad，demo试试就知道了）</span><br><span class="line">（应用了此方案，不管设计图多宽（当然，一般宽度为750，640也可以），最外层的div宽度设为100%就行，然后就可以愉快的布局了，不会出现你说的白边的情况。）</span><br><span class="line"></span><br><span class="line">对于尺寸比较大的元素，应该考虑用百分比。rem做单位的元素在哪种设备下都是固定大小，这点必须牢记！！</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">可能遇到的问题：</span><br><span class="line">1.问：为啥手机网页效果图宽度是要640或者750的，我非得弄个666的不行咩？</span><br><span class="line"></span><br><span class="line">答：老实说当然可以，不过为了规范，640或者750是相对合适的。拿Iphone 5s 举例，它的css像素宽度是320px，由于它的dpr=2，所以它的物理像素宽度为320 × 2 = 640px，这也就是为什么，你在5s上截了一张图，在电脑上打开，它的原始宽度是640px的原因。那 iphone 6 的截图宽度呢？ 375 × 2 = 750那 iphone 6 sp 的截图宽度呢？ 414 × 3 = 1242以此类推，你现在能明白效果图为什么一般是 640 ，750 甚至是 1242 的原因了么？（真没有歧视安卓机的意思。。。）</span><br><span class="line"></span><br><span class="line">2.问：宽度用rem写的情况下， 在 iphone6 上没问题， 在 iphone5上会有横向滚动条，何解？</span><br><span class="line"></span><br><span class="line">答：假设你的效果图宽度是750，在这个效果图上可能有一个宽度为7rem（高清方案默认 1rem = 100px）的元素。我们知道，高清方案的特点就是几乎完美还原效果图，也就是说，你写了一个宽度为 7rem 的元素，那么在目前主流移动设备上都是7rem。然而，iphone 5 的宽度为640，也就是6.4rem。于是横向滚动条不可避免的出现了。怎么办呢？ 这是我目前推荐的比较安全的方式：如果元素的宽度超过效果图宽度的一半（效果图宽为640或750），果断使用百分比宽度，或者flex布局。就像把等屏宽的图片宽度设为100%一样。</span><br><span class="line"></span><br><span class="line">3.问：不是 1rem = 100px吗，为什么我的代码写了一个宽度为3rem的元素，在电脑端的谷歌浏览器上宽度只有150px?</span><br><span class="line"></span><br><span class="line">答：先说高清方案代码，再次强调咱们的高清方案代码是根据设备的dpr动态设置html 的 font-size，如果dpr=1(如电脑端），则html的font-size为50px，此时 1rem = 50px如果dpr=2(如iphone 5 和 6），则html的font-size为100px，此时 1rem = 100px如果dpr=3(如iphone 6 sp），则html的font-size为150px，此时 1rem = 150px如果dpr为其他值，即便不是整数，如3.4 , 也是一样直接将dpr 乘以 50 。</span><br><span class="line">再来说说效果图，一般来讲，我们的效果图宽度要么是640，要么是750，无论哪一个，它们对应设备的dpr=2，此时，1 rem = 50 × 2 = 100px。这也就是为什么高清方案默认1rem = 100px。而将1rem默认100px也是好处多多，可以帮你快速换算单位，比如在750宽度下的效果图，某元素宽度为53px，那么css宽度直接设为53/100=0.53rem了。</span><br><span class="line">然而极少情况下，有设计师将效果图宽定为1242px，因为他手里只有一个iphone 6 sp (dpr = 3)，设计完效果图刚好可以在他的iphone 6 sp里查看调整。一切完毕之后，他将这个效果图交给你来切图。由于这个效果图对应设备的dpr=3，也就是1rem = 50 × 3 = 150px。所以如果你量取了一个宽度为90px的元素，它的css宽度应该为 90/150=0.6rem。由于咱们的高清方案默认1rem=100px，为了还原效果图，你需要这样换算。当然，一个技巧就是你可以直接修改咱们的高清方案的默认设置。在代码的最后 你会看到 flex(100, 1) ，将其修改成flex(66.66667, 1)（感谢简友：V旅行指出此处错误！ 2017/3/24）就不用那么麻烦的换算了，此时那个90px的直接写成0.9rem就可以了。</span><br><span class="line"></span><br><span class="line">4.问：高清方案在微信上，有时候字体会不受控制变的很大，怎么办？</span><br><span class="line"></span><br><span class="line">答：点我，这是我对该问题的总结</span><br><span class="line">5.问：我在底部导航用的flex感觉更合适一些，请问这样子混着用可以吗？</span><br><span class="line"></span><br><span class="line">答：咱们的rem适合写固定尺寸。其余的根据需要换成flex或者百分比。源码示例中就有这三种的综合运用。</span><br><span class="line">6.问：在高清方案下，一个标准的，较为理想的宽度为640的页面效果图应该是怎样的？</span><br><span class="line"></span><br><span class="line">7.这个会和bootstrap冲突。</span><br><span class="line">解决办法：</span><br><span class="line">1，将bootstrap 中，凡是用到px的单位一律换成rem</span><br><span class="line">2，如果你有使用webpack，建议使用将css转成rem的包（postcss-pxtorem）将自动完成第一步的操作。</span><br><span class="line"></span><br><span class="line">8.@2x和@3x的图片还要判断不同的dpr下用不同的图片。</span><br><span class="line"></span><br><span class="line">Normalize.css 是一个可以定制的CSS文件，它让不同的浏览器在渲染网页元素的时候形式更统一。</span><br><span class="line"></span><br><span class="line">Normalize.css 能干什么：</span><br><span class="line"></span><br><span class="line">保留有用的默认值，不同于许多 CSS 的重置</span><br><span class="line"></span><br><span class="line">标准化的样式，适用范围广的元素。</span><br><span class="line"></span><br><span class="line">纠正错误和常见的浏览器的不一致性。</span><br><span class="line"></span><br><span class="line">一些细微的改进，提高了易用性。</span><br><span class="line"></span><br><span class="line">使用详细的注释来解释代码。</span><br><span class="line"></span><br><span class="line">支持的浏览器：</span><br><span class="line"></span><br><span class="line">Google Chrome (latest)</span><br><span class="line"></span><br><span class="line">Mozilla Firefox (latest)</span><br><span class="line"></span><br><span class="line">Mozilla Firefox ESR</span><br><span class="line"></span><br><span class="line">Opera (latest)</span><br><span class="line"></span><br><span class="line">Apple Safari 6+</span><br><span class="line"></span><br><span class="line">Internet Explorer 8+</span><br></pre></td></tr></table></figure><p>引用于<a href="https://www.jianshu.com/p/07669cb3e7c5" target="_blank" rel="noopener">https://www.jianshu.com/p/07669cb3e7c5</a></p>]]></content>
      
      
      <categories>
          
          <category> 移动端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React Native动画</title>
      <link href="/2019/01/15/rn_04/"/>
      <url>/2019/01/15/rn_04/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近项目要做小游戏，小游戏当然就少不了动画了，一开始打算用h5做，但是考虑到内嵌h5坑可能有点多，所以最后还是选择react native的动画（项目本身就是react native写的，之后用rn代表react naitve）<br></p><h5 id="1、requestAnimationFrame"><a href="#1、requestAnimationFrame" class="headerlink" title="1、requestAnimationFrame"></a>1、requestAnimationFrame</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">export default class demo1 Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">  width: 100,</span><br><span class="line">  height: 100</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startAnimation() &#123;</span><br><span class="line">let count = 0;</span><br><span class="line">let &#123; width, height &#125; = this.state;</span><br><span class="line">requestAnimationFrame(() =&gt; &#123;</span><br><span class="line">this.setState(&#123;</span><br><span class="line">widthL: width + 1,</span><br><span class="line">height: height + 1</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">let &#123; width, height &#125; = this.state;</span><br><span class="line">return(</span><br><span class="line">&lt;View style = &#123; styles.container &#125;&gt;</span><br><span class="line">&lt;Image </span><br><span class="line">source = &#123;require(./icon.jpg)&#125;</span><br><span class="line">style = &#123;&#123;</span><br><span class="line">width: width,</span><br><span class="line">height: height</span><br><span class="line">&#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;TouchableOpacity</span><br><span class="line">style = &#123; styles.instructions &#125;</span><br><span class="line">onPress = &#123;()=&gt;this.startAnimation()&#125;</span><br><span class="line">&gt;</span><br><span class="line">&lt;Text style = &#123;&#123;</span><br><span class="line">alignSelf: &apos;center&apos;,</span><br><span class="line">color: &apos;#fff&apos;</span><br><span class="line">&#125;&#125;&gt;</span><br><span class="line">click me!</span><br><span class="line">&lt;/Text&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方式实现的动画有几个问题：<br></p><ul><li>实现方式是通过不断销毁、创建视图来完成，一方面如果你的视图的数据是动态获取的，那么就需要以合适的方式恢复数据；另一方面，这种方式必然造成性能和内存开销的问题。</li><li>如果需要刷新的View的层级比较深，那么这种方式会带来严重的性能问题。</li><li>requestAnimationFrame毕竟是web上css的用法，在手机上，动画的效果比较生硬，如果需要‘弹性动画’，‘淡入淡出’等效果，则是比较难以实现的（需要辅助各种函数）。</li><li><h5 id="2、setNativeProps"><a href="#2、setNativeProps" class="headerlink" title="2、setNativeProps"></a>2、setNativeProps</h5></li></ul><p>如果执意使用修改state的方式，觉得这种方式更符合当前需求对动画的控制，那么则应当使用原生组件的setNativeProps方法来做对应实现，它会直接修改组件底层特性，会重绘组件，因此性能也远胜动态修改组件内联style的方法。<br><br>我们稍微修改下startAnimation方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">startAnimation() &#123;</span><br><span class="line">  var count = 0;</span><br><span class="line">  while (++count &lt; 50) &#123;</span><br><span class="line">  requestAnimationFrame(() = &gt;&#123;</span><br><span class="line">  this.refs.image.setNativeProps(&#123;</span><br><span class="line">  style: &#123;</span><br><span class="line">  width: this.state.width++,</span><br><span class="line">  height: this.state.height++</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中this.refs.image指向的是image视图，效果比上面的好多了。</p><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><p>setNativeProps直接修改组件底层特性，不会重绘组件，因此性能也远胜动态修改组件内联style的方法。</p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ol><li>setNativeProps属于原生视图的方法，如果我们使用一个动画，单纯只是为了跟踪它的值，那么这个方法有点不合时宜。</li><li>还是和上面一种方式一样，如果需要实现‘弹性动画’，‘淡入淡出’等效果，则还是比较麻烦的。</li></ol><h5 id="3、LayoutAnimation"><a href="#3、LayoutAnimation" class="headerlink" title="3、LayoutAnimation"></a>3、LayoutAnimation</h5><p>当布局变化时，自动将视图运动到它们新的位置上。<br><br>一个常用的调用此API的办法是调用LayoutAnimation.configureNext(config)，然后调用setState。<br><br>其中conf参数格式参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">duration: 700,   //持续时间</span><br><span class="line">create: &#123;    //若是新布局的动画类型</span><br><span class="line">type: &apos;linear&apos;,  //线性模式</span><br><span class="line">property: &apos;opacity&apos;  //动画属性，除了opacity还有一个scaleXY可以配置</span><br><span class="line">&#125;,</span><br><span class="line">update: &#123;  //若是布局更新的动画类型</span><br><span class="line">type: &apos;spring&apos;,   //弹跳模式</span><br><span class="line">springDamping: 0.4  //弹跳阻尼系数</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中动画type的类型可枚举为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring //弹跳</span><br><span class="line">linear //线性</span><br><span class="line">easeInEaseOut //缓入缓出</span><br><span class="line">easeIn //缓入</span><br><span class="line">easeOut //缓出</span><br><span class="line">keyboard // 键入</span><br></pre></td></tr></table></figure><p>要注意的时，安卓平台使用LayoutAnimation动画必须加上这么一句代码(否则动画会失效):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIManager.setLayoutAnimationEnabledExperimental &amp;&amp; UIManager.setLayoutAnimationEnabledExperimental(true);</span><br></pre></td></tr></table></figure><p>于是我们一开始的动画就可以这么来写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">export default class demo2 extends Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">w: 200,</span><br><span class="line">h: 20</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_onPress() &#123;</span><br><span class="line">LayoutAnimation.configureNext(&#123;</span><br><span class="line">duration: 700,</span><br><span class="line">create: &#123;</span><br><span class="line">type: &apos;linear&apos;,</span><br><span class="line">property: &apos;opacity&apos;</span><br><span class="line">&#125;,</span><br><span class="line">update: &#123;</span><br><span class="line">type: &apos;spring&apos;,</span><br><span class="line">springDamping: 0.4</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">this.setState(&#123;</span><br><span class="line">w: this.state.w + 30,</span><br><span class="line">h: this.state.h + 30</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">return(</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;View style=&#123;[styles.content, &#123;width: this.state.w, height: this.state.h&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;TouchableOpacity onPress=&#123;this._onPress&#125;&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;Press me!&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;TouchableOpacity&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;忽略本按钮&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">)</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样动画灵活和流畅多了，<br>我们上面看到的仅仅是局部更新的情况，我们来看看新布局被创建（有新组建加入到视图上）的情况如何：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">export default class demo3 extends Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">showNewOne: false,</span><br><span class="line">w: 200,</span><br><span class="line">h: 20</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> _onPress() &#123;</span><br><span class="line">LayoutAnimation.configureNext(&#123;</span><br><span class="line">duration: 1200,</span><br><span class="line">create: &#123;</span><br><span class="line">type: &apos;linear&apos;,</span><br><span class="line">property: &apos;opacity&apos;  //注意这里，我们设置新布局被创建时的动画特性为透明度</span><br><span class="line">&#125;,</span><br><span class="line">update: &#123;</span><br><span class="line">type: &apos;spring&apos;,</span><br><span class="line">springDamping: 0.4</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">this.setState(&#123;w: this.state.w + 30, h: this.state.h + 30, showNewOne : true&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">let &#123; showNewOne &#125; = this.state;</span><br><span class="line">let newOne = showNewOne ?</span><br><span class="line">(</span><br><span class="line">&lt;View style=&#123;[styles.content, &#123;width: this.state.w, height: this.state.h&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;new one&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">) : null;</span><br><span class="line">return(</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;View style=&#123;[styles.content, &#123;width: this.state.w, height: this.state.h&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&#123;newOne&#125;</span><br><span class="line">&lt;TouchableOpacity onPress=&#123;this._onPress&#125;&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;Press me!&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;TouchableOpacity&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;忽略本按钮&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、Animated"><a href="#4、Animated" class="headerlink" title="4、Animated"></a>4、Animated</h5><p>通过Animated我们可以在确保性能良好的前提下创造更为灵活丰富且易维护的动画。<br><br>不同于上述的动画实现方式，我们得在 Animated.View、Animated.Text 或 Animated.Image 动画组件上运用 Animate 模块的动画能力(如果有在其他组件上的需求，可以使用Animated.createAnimatedComponent方法来对其它类型的组件创建动画)<br><br>下面来个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &#123;</span><br><span class="line">AppRegistry,</span><br><span class="line">StyleSheet,</span><br><span class="line">Text,</span><br><span class="line">View,</span><br><span class="line">Easing,</span><br><span class="line">Animated,</span><br><span class="line">TouchableOpacity,</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line"></span><br><span class="line">const _animateHandler;</span><br><span class="line">export default class demo4 extends Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">opacityAnmValue: new Animated.Value(0)</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">_animateHandler = Animated.timing(</span><br><span class="line">this.state.opacityAnmValue,</span><br><span class="line">&#123;</span><br><span class="line">toValue: 1,  //透明度动画最终值</span><br><span class="line">duration: 3000, </span><br><span class="line">easing: Easing.bezier(0.15,0.73,0.37,1.2) //缓冲函数</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_onPress() &#123;</span><br><span class="line">_animateHandler.start &amp;&amp; _animateHandler.start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">return(</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;Animated.View ref=&quot;view&quot; style=&#123;[styles.content, &#123;width: 200, height: 20, opacity: this.state.opacityAnmValue&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/Animated.View&gt;</span><br><span class="line">&lt;TouchableOpacity onPress=&#123;this._onPress&#125;&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;Press me!&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;TouchableOpacity &gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;忽略本按钮&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">container: &#123;</span><br><span class="line">flex: 1,</span><br><span class="line">justifyContent: &apos;center&apos;,</span><br><span class="line">alignItems: &apos;center&apos;</span><br><span class="line">&#125;,</span><br><span class="line">content: &#123;</span><br><span class="line">justifyContent: &apos;center&apos;,</span><br><span class="line">backgroundColor: &apos;yellow&apos;,</span><br><span class="line">&#125;,</span><br><span class="line">button: &#123;</span><br><span class="line">marginTop: 10,</span><br><span class="line">paddingVertical: 10,</span><br><span class="line">paddingHorizontal: 20,</span><br><span class="line">backgroundColor: &apos;black&apos;</span><br><span class="line">&#125;,</span><br><span class="line">buttonText: &#123;</span><br><span class="line">color: &apos;white&apos;,</span><br><span class="line">fontSize: 16,</span><br><span class="line">fontWeight: &apos;bold&apos;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>点击按钮后,Animated.View会以bezier曲线形式执行时长3秒的透明度动画(由0到1):<br></p><p>1、以 new Animated.Value(0) 实例化动画的初始值给state：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.state = &#123;</span><br><span class="line">//设置透明度动画初始值</span><br><span class="line">opacityAnmValue: new Animated.Value(0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、通过 Animated.timing 我们定义了一个动画事件，在后续可以以 .start() 或 .stop() 方法来开始/停止该动画：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">_animateHandler = Animated.timing(this.state.opacityAnmValue, &#123;</span><br><span class="line">toValue: 1,  //透明度动画最终值</span><br><span class="line">duration: 3000,   //动画时长3000毫秒</span><br><span class="line">easing: Easing.bezier(0.15, 0.73, 0.37, 1.2)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在点击事件中触发了动画的.start方法让它跑起来:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_onPress() &#123;</span><br><span class="line">_animateHandler.start &amp;&amp; _animateHandler.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>start 方法接受一个回调函数，会在动画结束时触发，并传入一个参数 {finished: true/false}，若动画是正常结束的，finished 字段值为true，若动画是因为被调用 .stop() 方法而提前结束的，则 finished 字段值为false。<br></p><p>3、动画的绑定是在 上的，我们把实例化的动画初始值传入 style 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Animated.View ref=&quot;view&quot; style=&#123;[styles.content, &#123;width: 200, height: 20, opacity: this.state.opacityAnmValue&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/Animated.View&gt;</span><br></pre></td></tr></table></figure><p>然后。。。就没有然后了，很简单吧。<br></p><p>这里需要讲一下的应该是定义动画事件的Animated.timing(animateValue, conf) 方法，其中设置参数格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  duration: 动画持续的时间（单位是毫秒），默认为500。</span><br><span class="line">  easing：一个用于定义曲线的渐变函数。阅读Easing模块可以找到许多预定义的函数。iOS默认为Easing.inOut(Easing.ease)。</span><br><span class="line">  delay: 在一段时间之后开始动画（单位是毫秒），默认为0。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里提及的 Easing 动画函数模块在 react-native/Libraries/Animated/src/ 目录下，该模块预置了 linear、ease、elastic、bezier 等诸多缓动特性，有兴趣可以去了解。<br></p><p>另外除了 Animated.timing，Animated 还提供了另外两个动画事件创建接口：<br></p><p>1、Animated.spring(animateValue, conf) —— 基础的单次弹跳物理模型，支持origami标准，conf参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  friction: 控制“弹跳系数”、夸张系数，默认为7。</span><br><span class="line">  tension: 控制速度，默认40。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &#123;</span><br><span class="line">AppRegistry,</span><br><span class="line">StyleSheet,</span><br><span class="line">Text,</span><br><span class="line">View,</span><br><span class="line">Easing,</span><br><span class="line">Animated,</span><br><span class="line">TouchableOpacity,</span><br><span class="line">&#125; from &apos;react-native&apos;</span><br><span class="line"></span><br><span class="line">let _animateHandler;</span><br><span class="line"></span><br><span class="line">export default class demo5 extends Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">bounceValue : new Animated.Value(0)   //设置缩放动画初始值</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">this.state.bounceValue.setValue(1.5);     // 设置一个较大的初始值</span><br><span class="line">_animateHandler = Animated.spring(this.state.bounceValue, &#123;</span><br><span class="line">toValue: 1,</span><br><span class="line">friction: 8,</span><br><span class="line">tension: 35</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_onPress() &#123;</span><br><span class="line">_animateHandler.start &amp;&amp; _animateHandler.start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_reload() &#123;</span><br><span class="line">AppRegistry.reload()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">return(</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;Animated.View ref=&quot;view&quot; style=&#123;[styles.content, &#123;width: 200, height: 20, transform: [&#123;scale: this.state.bounceValue&#125;]&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/Animated.View&gt;</span><br><span class="line">&lt;TouchableOpacity onPress=&#123;this._onPress&#125;&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;Press me!&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;TouchableOpacity onPress=&#123;this._reload&#125;&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;忽略本按钮&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">container: &#123;</span><br><span class="line">flex: 1,</span><br><span class="line">justifyContent: &apos;center&apos;,</span><br><span class="line">alignItems: &apos;center&apos;</span><br><span class="line">&#125;,</span><br><span class="line">content: &#123;</span><br><span class="line">justifyContent: &apos;center&apos;,</span><br><span class="line">backgroundColor: &apos;yellow&apos;,</span><br><span class="line">&#125;,</span><br><span class="line">button: &#123;</span><br><span class="line">marginTop: 10,</span><br><span class="line">paddingVertical: 10,</span><br><span class="line">paddingHorizontal: 20,</span><br><span class="line">backgroundColor: &apos;black&apos;</span><br><span class="line">&#125;,</span><br><span class="line">buttonText: &#123;</span><br><span class="line">color: &apos;white&apos;,</span><br><span class="line">fontSize: 16,</span><br><span class="line">fontWeight: &apos;bold&apos;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>留意这里我们用了 animateValue.setValue(1.5) 方法来修改动画属性值。<br></p><p>2、Animated.decay(animateValue, conf) —— 以一个初始速度开始并且逐渐减慢停止，conf参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  velocity: 起始速度，必填参数。</span><br><span class="line">  deceleration: 速度衰减比例，默认为0.997。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">let _animateHandler;</span><br><span class="line">export default class demo6 extends Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">bounceValue : new Animated.Value(0.1)</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line"> _animateHandler = Animated.decay(this.state.bounceValue, &#123;</span><br><span class="line">toValue: 0.2,</span><br><span class="line">velocity: 0.1</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_onPress() &#123;</span><br><span class="line">_animateHandler.start &amp;&amp; _animateHandler.start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">return(</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;Animated.View ref=&quot;view&quot; style=&#123;[styles.content, &#123;width: 200, height: 30, transform: [&#123;scale: this.state.bounceValue&#125;]&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/Animated.View&gt;</span><br><span class="line">&lt;TouchableOpacity onPress=&#123;this._onPress&#125;&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;Press me!&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;TouchableOpacity&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;忽略本按钮&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于最后介绍的两个动画效果，可能得熟悉一些物理、数学模型才能更好地来做控制，大部分情况下，咱们直接使用 Animated.timing 就足够满足需求了。<br></p><h5 id="监听动画"><a href="#监听动画" class="headerlink" title="监听动画"></a>监听动画</h5><p>1、有时候我们需要在动画的过程中监听到某动画时刻的属性值，可以通过animateValue.stopAnimation(callback) 或 animateValue.addListener(callback) 来实现<br>其中stopAnimation会停止当前动画并在回调函数中返回一个{value : number}对象，value对应最后一刻的动画属性值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">const _animateHandler, _isFirsPress = 0;</span><br><span class="line">export default class demo7 extends Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">opacityAnmValue : new Animated.Value(0)   //设置透明度动画初始值</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">_animateHandler = Animated.timing(</span><br><span class="line">this.state.opacityAnmValue, &#123;</span><br><span class="line">toValue: 1,</span><br><span class="line">duration: 6000,</span><br><span class="line">easing: Easing.linear</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_onPress() &#123;</span><br><span class="line">if(_isFirstPress === 0) &#123;</span><br><span class="line">_animateHandler.start &amp;&amp; _animateHandler.start();</span><br><span class="line">_isFirsPress = 1</span><br><span class="line">&#125; else &#123;</span><br><span class="line">this.state.opacityAnmValue.stopAnimation(value =&gt; &#123;</span><br><span class="line">Alert.alert(</span><br><span class="line">&quot;动画结束，最终值&quot;,</span><br><span class="line">JSON.stringify(value),</span><br><span class="line">[</span><br><span class="line">&#123;text: &apos;OK&apos;, onPress: () =&gt; &#123;&#125;&#125;</span><br><span class="line">]</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">return(</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;Animated.View style=&#123;[styles.content, &#123;width: 200, height: 20, opacity: this.state.opacityAnmValue&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/Animated.View&gt;</span><br><span class="line">&lt;TouchableOpacity onPress=&#123;this._onPress&#125;&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;Press me!&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;TouchableOpacity &gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;忽略本按钮&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而addListener方法会在动画的执行过程中调用callback回调函数，提供一个最近的值作为参数。<br></p><p>2、有时候我们希望在某个交互事件（特别是手势）中更灵活地捕获某个事件对象属性值，并动态赋予某个变量，对于这种需求可以通过 Animated.event 来实现。<br></p><p>它接受一个数组为参数，数组中的层次对应绑定事件参数的相应映射，听着有点绕，看例子就很好理解了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var scrollX = 0,</span><br><span class="line">  pan = &#123;</span><br><span class="line">x: 0,</span><br><span class="line">y: 0</span><br><span class="line">  &#125;;</span><br><span class="line">//...</span><br><span class="line">onScroll : Animated.event(</span><br><span class="line">  [&#123;nativeEvent: &#123;contentOffset: &#123;x: scrollX&#125;&#125;&#125;]   // scrollX = e.nativeEvent.contentOffset.x</span><br><span class="line">)</span><br><span class="line">onPanResponderMove : Animated.event([</span><br><span class="line">  null,          // 忽略原生事件</span><br><span class="line">  &#123;dx: pan.x, dy: pan.y&#125;     // 从gestureState中解析出dx和dy的值</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>onScroll是绑定给某个组件的滚动事件，而onPanResponderMove是 PanResponder 模块下的响应事件。<br></p><p>拿上方onPanResponderMove的例子来讲，该事件方法接收两个参数 e 和 gestureState，其中gestureState的属性有：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">stateID - 触摸状态的ID。在屏幕上有至少一个触摸点的情况下，这个ID会一直有效。</span><br><span class="line">moveX - 最近一次移动时的屏幕横坐标</span><br><span class="line">moveY - 最近一次移动时的屏幕纵坐标</span><br><span class="line">x0 - 当响应器产生时的屏幕坐标</span><br><span class="line">y0 - 当响应器产生时的屏幕坐标</span><br><span class="line">dx - 从触摸操作开始时的累计横向路程</span><br><span class="line">dy - 从触摸操作开始时的累计纵向路程</span><br><span class="line">vx - 当前的横向移动速度</span><br><span class="line">vy - 当前的纵向移动速度</span><br><span class="line">numberActiveTouches - 当前在屏幕上的有效触摸点的数量</span><br></pre></td></tr></table></figure><p>来个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">class AwesomeProject extends Component &#123;</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">transY : new Animated.Value(0)</span><br><span class="line">&#125;;</span><br><span class="line">this._panResponder = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">componentWillMount处预先创建手势响应器</span><br><span class="line">componentWillMount() &#123;</span><br><span class="line">this._panResponder = PanResponder.create(&#123;</span><br><span class="line">onStartShouldSetPanResponder: this._returnTrue.bind(this),</span><br><span class="line">onMoveShouldSetPanResponder: this._returnTrue.bind(this),</span><br><span class="line">//手势开始处理</span><br><span class="line">//手势移动时的处理</span><br><span class="line">onPanResponderMove: Animated.event([null, &#123;</span><br><span class="line">dy : this.state.transY</span><br><span class="line">&#125;])</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_returnTrue(e, gestureState) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;Animated.View style=&#123;[styles.content, &#123;width: this.state.w, height: this.state.h,</span><br><span class="line">transform: [&#123;</span><br><span class="line">  translateY : this.state.transY</span><br><span class="line">&#125;]</span><br><span class="line">&#125;]&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;[&#123;textAlign: &apos;center&apos;&#125;]&#125;&gt;Hi, here is VaJoy&lt;/Text&gt;</span><br><span class="line">&lt;/Animated.View&gt;</span><br><span class="line">&lt;TouchableOpacity&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125; &#123;...this._panResponder.panHandlers&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;control&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line"></span><br><span class="line">&lt;TouchableOpacity&gt;</span><br><span class="line">&lt;View style=&#123;styles.button&#125;&gt;</span><br><span class="line">&lt;Text style=&#123;styles.buttonText&#125;&gt;忽略此按钮&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">&lt;/TouchableOpacity&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
